// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/zetacore/crosschain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryZetaAccountingRequest struct {
}

func (m *QueryZetaAccountingRequest) Reset()         { *m = QueryZetaAccountingRequest{} }
func (m *QueryZetaAccountingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryZetaAccountingRequest) ProtoMessage()    {}
func (*QueryZetaAccountingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{0}
}
func (m *QueryZetaAccountingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZetaAccountingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZetaAccountingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZetaAccountingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZetaAccountingRequest.Merge(m, src)
}
func (m *QueryZetaAccountingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryZetaAccountingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZetaAccountingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZetaAccountingRequest proto.InternalMessageInfo

type QueryZetaAccountingResponse struct {
	AbortedZetaAmount string `protobuf:"bytes,1,opt,name=aborted_zeta_amount,json=abortedZetaAmount,proto3" json:"aborted_zeta_amount,omitempty"`
}

func (m *QueryZetaAccountingResponse) Reset()         { *m = QueryZetaAccountingResponse{} }
func (m *QueryZetaAccountingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryZetaAccountingResponse) ProtoMessage()    {}
func (*QueryZetaAccountingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{1}
}
func (m *QueryZetaAccountingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZetaAccountingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZetaAccountingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZetaAccountingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZetaAccountingResponse.Merge(m, src)
}
func (m *QueryZetaAccountingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryZetaAccountingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZetaAccountingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZetaAccountingResponse proto.InternalMessageInfo

func (m *QueryZetaAccountingResponse) GetAbortedZetaAmount() string {
	if m != nil {
		return m.AbortedZetaAmount
	}
	return ""
}

type QueryGetOutboundTrackerRequest struct {
	ChainID int64  `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetOutboundTrackerRequest) Reset()         { *m = QueryGetOutboundTrackerRequest{} }
func (m *QueryGetOutboundTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutboundTrackerRequest) ProtoMessage()    {}
func (*QueryGetOutboundTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{2}
}
func (m *QueryGetOutboundTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutboundTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutboundTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutboundTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutboundTrackerRequest.Merge(m, src)
}
func (m *QueryGetOutboundTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutboundTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutboundTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutboundTrackerRequest proto.InternalMessageInfo

func (m *QueryGetOutboundTrackerRequest) GetChainID() int64 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *QueryGetOutboundTrackerRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryGetOutboundTrackerResponse struct {
	OutboundTracker OutboundTracker `protobuf:"bytes,1,opt,name=outboundTracker,proto3" json:"outboundTracker"`
}

func (m *QueryGetOutboundTrackerResponse) Reset()         { *m = QueryGetOutboundTrackerResponse{} }
func (m *QueryGetOutboundTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutboundTrackerResponse) ProtoMessage()    {}
func (*QueryGetOutboundTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{3}
}
func (m *QueryGetOutboundTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutboundTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutboundTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutboundTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutboundTrackerResponse.Merge(m, src)
}
func (m *QueryGetOutboundTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutboundTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutboundTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutboundTrackerResponse proto.InternalMessageInfo

func (m *QueryGetOutboundTrackerResponse) GetOutboundTracker() OutboundTracker {
	if m != nil {
		return m.OutboundTracker
	}
	return OutboundTracker{}
}

type QueryAllOutboundTrackerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutboundTrackerRequest) Reset()         { *m = QueryAllOutboundTrackerRequest{} }
func (m *QueryAllOutboundTrackerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutboundTrackerRequest) ProtoMessage()    {}
func (*QueryAllOutboundTrackerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{4}
}
func (m *QueryAllOutboundTrackerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutboundTrackerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutboundTrackerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutboundTrackerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutboundTrackerRequest.Merge(m, src)
}
func (m *QueryAllOutboundTrackerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutboundTrackerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutboundTrackerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutboundTrackerRequest proto.InternalMessageInfo

func (m *QueryAllOutboundTrackerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOutboundTrackerResponse struct {
	OutboundTracker []OutboundTracker   `protobuf:"bytes,1,rep,name=outboundTracker,proto3" json:"outboundTracker"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutboundTrackerResponse) Reset()         { *m = QueryAllOutboundTrackerResponse{} }
func (m *QueryAllOutboundTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutboundTrackerResponse) ProtoMessage()    {}
func (*QueryAllOutboundTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{5}
}
func (m *QueryAllOutboundTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutboundTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutboundTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutboundTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutboundTrackerResponse.Merge(m, src)
}
func (m *QueryAllOutboundTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutboundTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutboundTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutboundTrackerResponse proto.InternalMessageInfo

func (m *QueryAllOutboundTrackerResponse) GetOutboundTracker() []OutboundTracker {
	if m != nil {
		return m.OutboundTracker
	}
	return nil
}

func (m *QueryAllOutboundTrackerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOutboundTrackerByChainRequest struct {
	Chain      int64              `protobuf:"varint,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutboundTrackerByChainRequest) Reset()         { *m = QueryAllOutboundTrackerByChainRequest{} }
func (m *QueryAllOutboundTrackerByChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutboundTrackerByChainRequest) ProtoMessage()    {}
func (*QueryAllOutboundTrackerByChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{6}
}
func (m *QueryAllOutboundTrackerByChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutboundTrackerByChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutboundTrackerByChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutboundTrackerByChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutboundTrackerByChainRequest.Merge(m, src)
}
func (m *QueryAllOutboundTrackerByChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutboundTrackerByChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutboundTrackerByChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutboundTrackerByChainRequest proto.InternalMessageInfo

func (m *QueryAllOutboundTrackerByChainRequest) GetChain() int64 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *QueryAllOutboundTrackerByChainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOutboundTrackerByChainResponse struct {
	OutboundTracker []OutboundTracker   `protobuf:"bytes,1,rep,name=outboundTracker,proto3" json:"outboundTracker"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutboundTrackerByChainResponse) Reset() {
	*m = QueryAllOutboundTrackerByChainResponse{}
}
func (m *QueryAllOutboundTrackerByChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutboundTrackerByChainResponse) ProtoMessage()    {}
func (*QueryAllOutboundTrackerByChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{7}
}
func (m *QueryAllOutboundTrackerByChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutboundTrackerByChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutboundTrackerByChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutboundTrackerByChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutboundTrackerByChainResponse.Merge(m, src)
}
func (m *QueryAllOutboundTrackerByChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutboundTrackerByChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutboundTrackerByChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutboundTrackerByChainResponse proto.InternalMessageInfo

func (m *QueryAllOutboundTrackerByChainResponse) GetOutboundTracker() []OutboundTracker {
	if m != nil {
		return m.OutboundTracker
	}
	return nil
}

func (m *QueryAllOutboundTrackerByChainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInboundTrackerByChainRequest struct {
	ChainId    int64              `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInboundTrackerByChainRequest) Reset()         { *m = QueryAllInboundTrackerByChainRequest{} }
func (m *QueryAllInboundTrackerByChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInboundTrackerByChainRequest) ProtoMessage()    {}
func (*QueryAllInboundTrackerByChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{8}
}
func (m *QueryAllInboundTrackerByChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInboundTrackerByChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInboundTrackerByChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInboundTrackerByChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInboundTrackerByChainRequest.Merge(m, src)
}
func (m *QueryAllInboundTrackerByChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInboundTrackerByChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInboundTrackerByChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInboundTrackerByChainRequest proto.InternalMessageInfo

func (m *QueryAllInboundTrackerByChainRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryAllInboundTrackerByChainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInboundTrackerByChainResponse struct {
	InboundTracker []InboundTracker    `protobuf:"bytes,1,rep,name=inboundTracker,proto3" json:"inboundTracker"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInboundTrackerByChainResponse) Reset()         { *m = QueryAllInboundTrackerByChainResponse{} }
func (m *QueryAllInboundTrackerByChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInboundTrackerByChainResponse) ProtoMessage()    {}
func (*QueryAllInboundTrackerByChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{9}
}
func (m *QueryAllInboundTrackerByChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInboundTrackerByChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInboundTrackerByChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInboundTrackerByChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInboundTrackerByChainResponse.Merge(m, src)
}
func (m *QueryAllInboundTrackerByChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInboundTrackerByChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInboundTrackerByChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInboundTrackerByChainResponse proto.InternalMessageInfo

func (m *QueryAllInboundTrackerByChainResponse) GetInboundTracker() []InboundTracker {
	if m != nil {
		return m.InboundTracker
	}
	return nil
}

func (m *QueryAllInboundTrackerByChainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInboundTrackersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInboundTrackersRequest) Reset()         { *m = QueryAllInboundTrackersRequest{} }
func (m *QueryAllInboundTrackersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInboundTrackersRequest) ProtoMessage()    {}
func (*QueryAllInboundTrackersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{10}
}
func (m *QueryAllInboundTrackersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInboundTrackersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInboundTrackersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInboundTrackersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInboundTrackersRequest.Merge(m, src)
}
func (m *QueryAllInboundTrackersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInboundTrackersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInboundTrackersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInboundTrackersRequest proto.InternalMessageInfo

func (m *QueryAllInboundTrackersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInboundTrackersResponse struct {
	InboundTracker []InboundTracker    `protobuf:"bytes,1,rep,name=inboundTracker,proto3" json:"inboundTracker"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInboundTrackersResponse) Reset()         { *m = QueryAllInboundTrackersResponse{} }
func (m *QueryAllInboundTrackersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInboundTrackersResponse) ProtoMessage()    {}
func (*QueryAllInboundTrackersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{11}
}
func (m *QueryAllInboundTrackersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInboundTrackersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInboundTrackersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInboundTrackersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInboundTrackersResponse.Merge(m, src)
}
func (m *QueryAllInboundTrackersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInboundTrackersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInboundTrackersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInboundTrackersResponse proto.InternalMessageInfo

func (m *QueryAllInboundTrackersResponse) GetInboundTracker() []InboundTracker {
	if m != nil {
		return m.InboundTracker
	}
	return nil
}

func (m *QueryAllInboundTrackersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInboundHashToCctxRequest struct {
	InboundHash string `protobuf:"bytes,1,opt,name=inboundHash,proto3" json:"inboundHash,omitempty"`
}

func (m *QueryGetInboundHashToCctxRequest) Reset()         { *m = QueryGetInboundHashToCctxRequest{} }
func (m *QueryGetInboundHashToCctxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInboundHashToCctxRequest) ProtoMessage()    {}
func (*QueryGetInboundHashToCctxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{12}
}
func (m *QueryGetInboundHashToCctxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInboundHashToCctxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInboundHashToCctxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInboundHashToCctxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInboundHashToCctxRequest.Merge(m, src)
}
func (m *QueryGetInboundHashToCctxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInboundHashToCctxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInboundHashToCctxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInboundHashToCctxRequest proto.InternalMessageInfo

func (m *QueryGetInboundHashToCctxRequest) GetInboundHash() string {
	if m != nil {
		return m.InboundHash
	}
	return ""
}

type QueryGetInboundHashToCctxResponse struct {
	InboundHashToCctx InboundHashToCctx `protobuf:"bytes,1,opt,name=inboundHashToCctx,proto3" json:"inboundHashToCctx"`
}

func (m *QueryGetInboundHashToCctxResponse) Reset()         { *m = QueryGetInboundHashToCctxResponse{} }
func (m *QueryGetInboundHashToCctxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInboundHashToCctxResponse) ProtoMessage()    {}
func (*QueryGetInboundHashToCctxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{13}
}
func (m *QueryGetInboundHashToCctxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInboundHashToCctxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInboundHashToCctxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInboundHashToCctxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInboundHashToCctxResponse.Merge(m, src)
}
func (m *QueryGetInboundHashToCctxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInboundHashToCctxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInboundHashToCctxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInboundHashToCctxResponse proto.InternalMessageInfo

func (m *QueryGetInboundHashToCctxResponse) GetInboundHashToCctx() InboundHashToCctx {
	if m != nil {
		return m.InboundHashToCctx
	}
	return InboundHashToCctx{}
}

type QueryInboundHashToCctxDataRequest struct {
	InboundHash string `protobuf:"bytes,1,opt,name=inboundHash,proto3" json:"inboundHash,omitempty"`
}

func (m *QueryInboundHashToCctxDataRequest) Reset()         { *m = QueryInboundHashToCctxDataRequest{} }
func (m *QueryInboundHashToCctxDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInboundHashToCctxDataRequest) ProtoMessage()    {}
func (*QueryInboundHashToCctxDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{14}
}
func (m *QueryInboundHashToCctxDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInboundHashToCctxDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInboundHashToCctxDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInboundHashToCctxDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInboundHashToCctxDataRequest.Merge(m, src)
}
func (m *QueryInboundHashToCctxDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInboundHashToCctxDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInboundHashToCctxDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInboundHashToCctxDataRequest proto.InternalMessageInfo

func (m *QueryInboundHashToCctxDataRequest) GetInboundHash() string {
	if m != nil {
		return m.InboundHash
	}
	return ""
}

type QueryInboundHashToCctxDataResponse struct {
	CrossChainTxs []CrossChainTx `protobuf:"bytes,1,rep,name=CrossChainTxs,proto3" json:"CrossChainTxs"`
}

func (m *QueryInboundHashToCctxDataResponse) Reset()         { *m = QueryInboundHashToCctxDataResponse{} }
func (m *QueryInboundHashToCctxDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInboundHashToCctxDataResponse) ProtoMessage()    {}
func (*QueryInboundHashToCctxDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{15}
}
func (m *QueryInboundHashToCctxDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInboundHashToCctxDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInboundHashToCctxDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInboundHashToCctxDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInboundHashToCctxDataResponse.Merge(m, src)
}
func (m *QueryInboundHashToCctxDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInboundHashToCctxDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInboundHashToCctxDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInboundHashToCctxDataResponse proto.InternalMessageInfo

func (m *QueryInboundHashToCctxDataResponse) GetCrossChainTxs() []CrossChainTx {
	if m != nil {
		return m.CrossChainTxs
	}
	return nil
}

type QueryAllInboundHashToCctxRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInboundHashToCctxRequest) Reset()         { *m = QueryAllInboundHashToCctxRequest{} }
func (m *QueryAllInboundHashToCctxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInboundHashToCctxRequest) ProtoMessage()    {}
func (*QueryAllInboundHashToCctxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{16}
}
func (m *QueryAllInboundHashToCctxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInboundHashToCctxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInboundHashToCctxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInboundHashToCctxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInboundHashToCctxRequest.Merge(m, src)
}
func (m *QueryAllInboundHashToCctxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInboundHashToCctxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInboundHashToCctxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInboundHashToCctxRequest proto.InternalMessageInfo

func (m *QueryAllInboundHashToCctxRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInboundHashToCctxResponse struct {
	InboundHashToCctx []InboundHashToCctx `protobuf:"bytes,1,rep,name=inboundHashToCctx,proto3" json:"inboundHashToCctx"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInboundHashToCctxResponse) Reset()         { *m = QueryAllInboundHashToCctxResponse{} }
func (m *QueryAllInboundHashToCctxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInboundHashToCctxResponse) ProtoMessage()    {}
func (*QueryAllInboundHashToCctxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{17}
}
func (m *QueryAllInboundHashToCctxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInboundHashToCctxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInboundHashToCctxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInboundHashToCctxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInboundHashToCctxResponse.Merge(m, src)
}
func (m *QueryAllInboundHashToCctxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInboundHashToCctxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInboundHashToCctxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInboundHashToCctxResponse proto.InternalMessageInfo

func (m *QueryAllInboundHashToCctxResponse) GetInboundHashToCctx() []InboundHashToCctx {
	if m != nil {
		return m.InboundHashToCctx
	}
	return nil
}

func (m *QueryAllInboundHashToCctxResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGasPriceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetGasPriceRequest) Reset()         { *m = QueryGetGasPriceRequest{} }
func (m *QueryGetGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasPriceRequest) ProtoMessage()    {}
func (*QueryGetGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{18}
}
func (m *QueryGetGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasPriceRequest.Merge(m, src)
}
func (m *QueryGetGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasPriceRequest proto.InternalMessageInfo

func (m *QueryGetGasPriceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetGasPriceResponse struct {
	GasPrice *GasPrice `protobuf:"bytes,1,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
}

func (m *QueryGetGasPriceResponse) Reset()         { *m = QueryGetGasPriceResponse{} }
func (m *QueryGetGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasPriceResponse) ProtoMessage()    {}
func (*QueryGetGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{19}
}
func (m *QueryGetGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasPriceResponse.Merge(m, src)
}
func (m *QueryGetGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasPriceResponse proto.InternalMessageInfo

func (m *QueryGetGasPriceResponse) GetGasPrice() *GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

type QueryAllGasPriceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasPriceRequest) Reset()         { *m = QueryAllGasPriceRequest{} }
func (m *QueryAllGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasPriceRequest) ProtoMessage()    {}
func (*QueryAllGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{20}
}
func (m *QueryAllGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasPriceRequest.Merge(m, src)
}
func (m *QueryAllGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasPriceRequest proto.InternalMessageInfo

func (m *QueryAllGasPriceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGasPriceResponse struct {
	GasPrice   []*GasPrice         `protobuf:"bytes,1,rep,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasPriceResponse) Reset()         { *m = QueryAllGasPriceResponse{} }
func (m *QueryAllGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasPriceResponse) ProtoMessage()    {}
func (*QueryAllGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{21}
}
func (m *QueryAllGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasPriceResponse.Merge(m, src)
}
func (m *QueryAllGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasPriceResponse proto.InternalMessageInfo

func (m *QueryAllGasPriceResponse) GetGasPrice() []*GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *QueryAllGasPriceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLastBlockHeightRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetLastBlockHeightRequest) Reset()         { *m = QueryGetLastBlockHeightRequest{} }
func (m *QueryGetLastBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastBlockHeightRequest) ProtoMessage()    {}
func (*QueryGetLastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{22}
}
func (m *QueryGetLastBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastBlockHeightRequest.Merge(m, src)
}
func (m *QueryGetLastBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastBlockHeightRequest proto.InternalMessageInfo

func (m *QueryGetLastBlockHeightRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetLastBlockHeightResponse struct {
	LastBlockHeight *LastBlockHeight `protobuf:"bytes,1,opt,name=LastBlockHeight,proto3" json:"LastBlockHeight,omitempty"`
}

func (m *QueryGetLastBlockHeightResponse) Reset()         { *m = QueryGetLastBlockHeightResponse{} }
func (m *QueryGetLastBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastBlockHeightResponse) ProtoMessage()    {}
func (*QueryGetLastBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{23}
}
func (m *QueryGetLastBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastBlockHeightResponse.Merge(m, src)
}
func (m *QueryGetLastBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastBlockHeightResponse proto.InternalMessageInfo

func (m *QueryGetLastBlockHeightResponse) GetLastBlockHeight() *LastBlockHeight {
	if m != nil {
		return m.LastBlockHeight
	}
	return nil
}

type QueryAllLastBlockHeightRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLastBlockHeightRequest) Reset()         { *m = QueryAllLastBlockHeightRequest{} }
func (m *QueryAllLastBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLastBlockHeightRequest) ProtoMessage()    {}
func (*QueryAllLastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{24}
}
func (m *QueryAllLastBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLastBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLastBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLastBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLastBlockHeightRequest.Merge(m, src)
}
func (m *QueryAllLastBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLastBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLastBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLastBlockHeightRequest proto.InternalMessageInfo

func (m *QueryAllLastBlockHeightRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLastBlockHeightResponse struct {
	LastBlockHeight []*LastBlockHeight  `protobuf:"bytes,1,rep,name=LastBlockHeight,proto3" json:"LastBlockHeight,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLastBlockHeightResponse) Reset()         { *m = QueryAllLastBlockHeightResponse{} }
func (m *QueryAllLastBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLastBlockHeightResponse) ProtoMessage()    {}
func (*QueryAllLastBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{25}
}
func (m *QueryAllLastBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLastBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLastBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLastBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLastBlockHeightResponse.Merge(m, src)
}
func (m *QueryAllLastBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLastBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLastBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLastBlockHeightResponse proto.InternalMessageInfo

func (m *QueryAllLastBlockHeightResponse) GetLastBlockHeight() []*LastBlockHeight {
	if m != nil {
		return m.LastBlockHeight
	}
	return nil
}

func (m *QueryAllLastBlockHeightResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCctxRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetCctxRequest) Reset()         { *m = QueryGetCctxRequest{} }
func (m *QueryGetCctxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCctxRequest) ProtoMessage()    {}
func (*QueryGetCctxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{26}
}
func (m *QueryGetCctxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCctxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCctxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCctxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCctxRequest.Merge(m, src)
}
func (m *QueryGetCctxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCctxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCctxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCctxRequest proto.InternalMessageInfo

func (m *QueryGetCctxRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetCctxByNonceRequest struct {
	ChainID int64  `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetCctxByNonceRequest) Reset()         { *m = QueryGetCctxByNonceRequest{} }
func (m *QueryGetCctxByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCctxByNonceRequest) ProtoMessage()    {}
func (*QueryGetCctxByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{27}
}
func (m *QueryGetCctxByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCctxByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCctxByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCctxByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCctxByNonceRequest.Merge(m, src)
}
func (m *QueryGetCctxByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCctxByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCctxByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCctxByNonceRequest proto.InternalMessageInfo

func (m *QueryGetCctxByNonceRequest) GetChainID() int64 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *QueryGetCctxByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryGetCctxResponse struct {
	CrossChainTx *CrossChainTx `protobuf:"bytes,1,opt,name=CrossChainTx,proto3" json:"CrossChainTx,omitempty"`
}

func (m *QueryGetCctxResponse) Reset()         { *m = QueryGetCctxResponse{} }
func (m *QueryGetCctxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCctxResponse) ProtoMessage()    {}
func (*QueryGetCctxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{28}
}
func (m *QueryGetCctxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCctxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCctxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCctxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCctxResponse.Merge(m, src)
}
func (m *QueryGetCctxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCctxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCctxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCctxResponse proto.InternalMessageInfo

func (m *QueryGetCctxResponse) GetCrossChainTx() *CrossChainTx {
	if m != nil {
		return m.CrossChainTx
	}
	return nil
}

type QueryAllCctxRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCctxRequest) Reset()         { *m = QueryAllCctxRequest{} }
func (m *QueryAllCctxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCctxRequest) ProtoMessage()    {}
func (*QueryAllCctxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{29}
}
func (m *QueryAllCctxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCctxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCctxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCctxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCctxRequest.Merge(m, src)
}
func (m *QueryAllCctxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCctxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCctxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCctxRequest proto.InternalMessageInfo

func (m *QueryAllCctxRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCctxResponse struct {
	CrossChainTx []*CrossChainTx     `protobuf:"bytes,1,rep,name=CrossChainTx,proto3" json:"CrossChainTx,omitempty"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCctxResponse) Reset()         { *m = QueryAllCctxResponse{} }
func (m *QueryAllCctxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCctxResponse) ProtoMessage()    {}
func (*QueryAllCctxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{30}
}
func (m *QueryAllCctxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCctxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCctxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCctxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCctxResponse.Merge(m, src)
}
func (m *QueryAllCctxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCctxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCctxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCctxResponse proto.InternalMessageInfo

func (m *QueryAllCctxResponse) GetCrossChainTx() []*CrossChainTx {
	if m != nil {
		return m.CrossChainTx
	}
	return nil
}

func (m *QueryAllCctxResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListPendingCctxRequest struct {
	ChainId int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Limit   uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryListPendingCctxRequest) Reset()         { *m = QueryListPendingCctxRequest{} }
func (m *QueryListPendingCctxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListPendingCctxRequest) ProtoMessage()    {}
func (*QueryListPendingCctxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{31}
}
func (m *QueryListPendingCctxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPendingCctxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPendingCctxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPendingCctxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPendingCctxRequest.Merge(m, src)
}
func (m *QueryListPendingCctxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPendingCctxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPendingCctxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPendingCctxRequest proto.InternalMessageInfo

func (m *QueryListPendingCctxRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryListPendingCctxRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryListPendingCctxResponse struct {
	CrossChainTx []*CrossChainTx `protobuf:"bytes,1,rep,name=CrossChainTx,proto3" json:"CrossChainTx,omitempty"`
	TotalPending uint64          `protobuf:"varint,2,opt,name=totalPending,proto3" json:"totalPending,omitempty"`
}

func (m *QueryListPendingCctxResponse) Reset()         { *m = QueryListPendingCctxResponse{} }
func (m *QueryListPendingCctxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListPendingCctxResponse) ProtoMessage()    {}
func (*QueryListPendingCctxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{32}
}
func (m *QueryListPendingCctxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPendingCctxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPendingCctxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPendingCctxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPendingCctxResponse.Merge(m, src)
}
func (m *QueryListPendingCctxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPendingCctxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPendingCctxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPendingCctxResponse proto.InternalMessageInfo

func (m *QueryListPendingCctxResponse) GetCrossChainTx() []*CrossChainTx {
	if m != nil {
		return m.CrossChainTx
	}
	return nil
}

func (m *QueryListPendingCctxResponse) GetTotalPending() uint64 {
	if m != nil {
		return m.TotalPending
	}
	return 0
}

type QueryRateLimiterInputRequest struct {
	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Window int64  `protobuf:"varint,2,opt,name=window,proto3" json:"window,omitempty"`
}

func (m *QueryRateLimiterInputRequest) Reset()         { *m = QueryRateLimiterInputRequest{} }
func (m *QueryRateLimiterInputRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimiterInputRequest) ProtoMessage()    {}
func (*QueryRateLimiterInputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{33}
}
func (m *QueryRateLimiterInputRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimiterInputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimiterInputRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimiterInputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimiterInputRequest.Merge(m, src)
}
func (m *QueryRateLimiterInputRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimiterInputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimiterInputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimiterInputRequest proto.InternalMessageInfo

func (m *QueryRateLimiterInputRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryRateLimiterInputRequest) GetWindow() int64 {
	if m != nil {
		return m.Window
	}
	return 0
}

type QueryRateLimiterInputResponse struct {
	Height                  int64           `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	CctxsMissed             []*CrossChainTx `protobuf:"bytes,2,rep,name=cctxs_missed,json=cctxsMissed,proto3" json:"cctxs_missed,omitempty"`
	CctxsPending            []*CrossChainTx `protobuf:"bytes,3,rep,name=cctxs_pending,json=cctxsPending,proto3" json:"cctxs_pending,omitempty"`
	TotalPending            uint64          `protobuf:"varint,4,opt,name=total_pending,json=totalPending,proto3" json:"total_pending,omitempty"`
	PastCctxsValue          string          `protobuf:"bytes,5,opt,name=past_cctxs_value,json=pastCctxsValue,proto3" json:"past_cctxs_value,omitempty"`
	PendingCctxsValue       string          `protobuf:"bytes,6,opt,name=pending_cctxs_value,json=pendingCctxsValue,proto3" json:"pending_cctxs_value,omitempty"`
	LowestPendingCctxHeight int64           `protobuf:"varint,7,opt,name=lowest_pending_cctx_height,json=lowestPendingCctxHeight,proto3" json:"lowest_pending_cctx_height,omitempty"`
}

func (m *QueryRateLimiterInputResponse) Reset()         { *m = QueryRateLimiterInputResponse{} }
func (m *QueryRateLimiterInputResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimiterInputResponse) ProtoMessage()    {}
func (*QueryRateLimiterInputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{34}
}
func (m *QueryRateLimiterInputResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimiterInputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimiterInputResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimiterInputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimiterInputResponse.Merge(m, src)
}
func (m *QueryRateLimiterInputResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimiterInputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimiterInputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimiterInputResponse proto.InternalMessageInfo

func (m *QueryRateLimiterInputResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryRateLimiterInputResponse) GetCctxsMissed() []*CrossChainTx {
	if m != nil {
		return m.CctxsMissed
	}
	return nil
}

func (m *QueryRateLimiterInputResponse) GetCctxsPending() []*CrossChainTx {
	if m != nil {
		return m.CctxsPending
	}
	return nil
}

func (m *QueryRateLimiterInputResponse) GetTotalPending() uint64 {
	if m != nil {
		return m.TotalPending
	}
	return 0
}

func (m *QueryRateLimiterInputResponse) GetPastCctxsValue() string {
	if m != nil {
		return m.PastCctxsValue
	}
	return ""
}

func (m *QueryRateLimiterInputResponse) GetPendingCctxsValue() string {
	if m != nil {
		return m.PendingCctxsValue
	}
	return ""
}

func (m *QueryRateLimiterInputResponse) GetLowestPendingCctxHeight() int64 {
	if m != nil {
		return m.LowestPendingCctxHeight
	}
	return 0
}

type QueryListPendingCctxWithinRateLimitRequest struct {
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryListPendingCctxWithinRateLimitRequest) Reset() {
	*m = QueryListPendingCctxWithinRateLimitRequest{}
}
func (m *QueryListPendingCctxWithinRateLimitRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryListPendingCctxWithinRateLimitRequest) ProtoMessage() {}
func (*QueryListPendingCctxWithinRateLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{35}
}
func (m *QueryListPendingCctxWithinRateLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPendingCctxWithinRateLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPendingCctxWithinRateLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPendingCctxWithinRateLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPendingCctxWithinRateLimitRequest.Merge(m, src)
}
func (m *QueryListPendingCctxWithinRateLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPendingCctxWithinRateLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPendingCctxWithinRateLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPendingCctxWithinRateLimitRequest proto.InternalMessageInfo

func (m *QueryListPendingCctxWithinRateLimitRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type QueryListPendingCctxWithinRateLimitResponse struct {
	CrossChainTx          []*CrossChainTx `protobuf:"bytes,1,rep,name=cross_chain_tx,json=crossChainTx,proto3" json:"cross_chain_tx,omitempty"`
	TotalPending          uint64          `protobuf:"varint,2,opt,name=total_pending,json=totalPending,proto3" json:"total_pending,omitempty"`
	CurrentWithdrawWindow int64           `protobuf:"varint,3,opt,name=current_withdraw_window,json=currentWithdrawWindow,proto3" json:"current_withdraw_window,omitempty"`
	CurrentWithdrawRate   string          `protobuf:"bytes,4,opt,name=current_withdraw_rate,json=currentWithdrawRate,proto3" json:"current_withdraw_rate,omitempty"`
	RateLimitExceeded     bool            `protobuf:"varint,5,opt,name=rate_limit_exceeded,json=rateLimitExceeded,proto3" json:"rate_limit_exceeded,omitempty"`
}

func (m *QueryListPendingCctxWithinRateLimitResponse) Reset() {
	*m = QueryListPendingCctxWithinRateLimitResponse{}
}
func (m *QueryListPendingCctxWithinRateLimitResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryListPendingCctxWithinRateLimitResponse) ProtoMessage() {}
func (*QueryListPendingCctxWithinRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{36}
}
func (m *QueryListPendingCctxWithinRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPendingCctxWithinRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPendingCctxWithinRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPendingCctxWithinRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPendingCctxWithinRateLimitResponse.Merge(m, src)
}
func (m *QueryListPendingCctxWithinRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPendingCctxWithinRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPendingCctxWithinRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPendingCctxWithinRateLimitResponse proto.InternalMessageInfo

func (m *QueryListPendingCctxWithinRateLimitResponse) GetCrossChainTx() []*CrossChainTx {
	if m != nil {
		return m.CrossChainTx
	}
	return nil
}

func (m *QueryListPendingCctxWithinRateLimitResponse) GetTotalPending() uint64 {
	if m != nil {
		return m.TotalPending
	}
	return 0
}

func (m *QueryListPendingCctxWithinRateLimitResponse) GetCurrentWithdrawWindow() int64 {
	if m != nil {
		return m.CurrentWithdrawWindow
	}
	return 0
}

func (m *QueryListPendingCctxWithinRateLimitResponse) GetCurrentWithdrawRate() string {
	if m != nil {
		return m.CurrentWithdrawRate
	}
	return ""
}

func (m *QueryListPendingCctxWithinRateLimitResponse) GetRateLimitExceeded() bool {
	if m != nil {
		return m.RateLimitExceeded
	}
	return false
}

type QueryLastZetaHeightRequest struct {
}

func (m *QueryLastZetaHeightRequest) Reset()         { *m = QueryLastZetaHeightRequest{} }
func (m *QueryLastZetaHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastZetaHeightRequest) ProtoMessage()    {}
func (*QueryLastZetaHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{37}
}
func (m *QueryLastZetaHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastZetaHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastZetaHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastZetaHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastZetaHeightRequest.Merge(m, src)
}
func (m *QueryLastZetaHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastZetaHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastZetaHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastZetaHeightRequest proto.InternalMessageInfo

type QueryLastZetaHeightResponse struct {
	Height int64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (m *QueryLastZetaHeightResponse) Reset()         { *m = QueryLastZetaHeightResponse{} }
func (m *QueryLastZetaHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastZetaHeightResponse) ProtoMessage()    {}
func (*QueryLastZetaHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{38}
}
func (m *QueryLastZetaHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastZetaHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastZetaHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastZetaHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastZetaHeightResponse.Merge(m, src)
}
func (m *QueryLastZetaHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastZetaHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastZetaHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastZetaHeightResponse proto.InternalMessageInfo

func (m *QueryLastZetaHeightResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryConvertGasToZetaRequest struct {
	ChainId  int64  `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	GasLimit string `protobuf:"bytes,2,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
}

func (m *QueryConvertGasToZetaRequest) Reset()         { *m = QueryConvertGasToZetaRequest{} }
func (m *QueryConvertGasToZetaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConvertGasToZetaRequest) ProtoMessage()    {}
func (*QueryConvertGasToZetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{39}
}
func (m *QueryConvertGasToZetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConvertGasToZetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConvertGasToZetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConvertGasToZetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConvertGasToZetaRequest.Merge(m, src)
}
func (m *QueryConvertGasToZetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConvertGasToZetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConvertGasToZetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConvertGasToZetaRequest proto.InternalMessageInfo

func (m *QueryConvertGasToZetaRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryConvertGasToZetaRequest) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

type QueryConvertGasToZetaResponse struct {
	OutboundGasInZeta string `protobuf:"bytes,1,opt,name=outboundGasInZeta,proto3" json:"outboundGasInZeta,omitempty"`
	ProtocolFeeInZeta string `protobuf:"bytes,2,opt,name=protocolFeeInZeta,proto3" json:"protocolFeeInZeta,omitempty"`
	ZetaBlockHeight   uint64 `protobuf:"varint,3,opt,name=ZetaBlockHeight,proto3" json:"ZetaBlockHeight,omitempty"`
}

func (m *QueryConvertGasToZetaResponse) Reset()         { *m = QueryConvertGasToZetaResponse{} }
func (m *QueryConvertGasToZetaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConvertGasToZetaResponse) ProtoMessage()    {}
func (*QueryConvertGasToZetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{40}
}
func (m *QueryConvertGasToZetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConvertGasToZetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConvertGasToZetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConvertGasToZetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConvertGasToZetaResponse.Merge(m, src)
}
func (m *QueryConvertGasToZetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConvertGasToZetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConvertGasToZetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConvertGasToZetaResponse proto.InternalMessageInfo

func (m *QueryConvertGasToZetaResponse) GetOutboundGasInZeta() string {
	if m != nil {
		return m.OutboundGasInZeta
	}
	return ""
}

func (m *QueryConvertGasToZetaResponse) GetProtocolFeeInZeta() string {
	if m != nil {
		return m.ProtocolFeeInZeta
	}
	return ""
}

func (m *QueryConvertGasToZetaResponse) GetZetaBlockHeight() uint64 {
	if m != nil {
		return m.ZetaBlockHeight
	}
	return 0
}

type QueryMessagePassingProtocolFeeRequest struct {
}

func (m *QueryMessagePassingProtocolFeeRequest) Reset()         { *m = QueryMessagePassingProtocolFeeRequest{} }
func (m *QueryMessagePassingProtocolFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMessagePassingProtocolFeeRequest) ProtoMessage()    {}
func (*QueryMessagePassingProtocolFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{41}
}
func (m *QueryMessagePassingProtocolFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessagePassingProtocolFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessagePassingProtocolFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessagePassingProtocolFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessagePassingProtocolFeeRequest.Merge(m, src)
}
func (m *QueryMessagePassingProtocolFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessagePassingProtocolFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessagePassingProtocolFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessagePassingProtocolFeeRequest proto.InternalMessageInfo

type QueryMessagePassingProtocolFeeResponse struct {
	FeeInZeta string `protobuf:"bytes,1,opt,name=feeInZeta,proto3" json:"feeInZeta,omitempty"`
}

func (m *QueryMessagePassingProtocolFeeResponse) Reset() {
	*m = QueryMessagePassingProtocolFeeResponse{}
}
func (m *QueryMessagePassingProtocolFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMessagePassingProtocolFeeResponse) ProtoMessage()    {}
func (*QueryMessagePassingProtocolFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{42}
}
func (m *QueryMessagePassingProtocolFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessagePassingProtocolFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessagePassingProtocolFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessagePassingProtocolFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessagePassingProtocolFeeResponse.Merge(m, src)
}
func (m *QueryMessagePassingProtocolFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessagePassingProtocolFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessagePassingProtocolFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessagePassingProtocolFeeResponse proto.InternalMessageInfo

func (m *QueryMessagePassingProtocolFeeResponse) GetFeeInZeta() string {
	if m != nil {
		return m.FeeInZeta
	}
	return ""
}

type QueryRateLimiterFlagsRequest struct {
}

func (m *QueryRateLimiterFlagsRequest) Reset()         { *m = QueryRateLimiterFlagsRequest{} }
func (m *QueryRateLimiterFlagsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimiterFlagsRequest) ProtoMessage()    {}
func (*QueryRateLimiterFlagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{43}
}
func (m *QueryRateLimiterFlagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimiterFlagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimiterFlagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimiterFlagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimiterFlagsRequest.Merge(m, src)
}
func (m *QueryRateLimiterFlagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimiterFlagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimiterFlagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimiterFlagsRequest proto.InternalMessageInfo

type QueryRateLimiterFlagsResponse struct {
	RateLimiterFlags RateLimiterFlags `protobuf:"bytes,1,opt,name=rateLimiterFlags,proto3" json:"rateLimiterFlags"`
}

func (m *QueryRateLimiterFlagsResponse) Reset()         { *m = QueryRateLimiterFlagsResponse{} }
func (m *QueryRateLimiterFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimiterFlagsResponse) ProtoMessage()    {}
func (*QueryRateLimiterFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d00cb546ea76908b, []int{44}
}
func (m *QueryRateLimiterFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimiterFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimiterFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimiterFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimiterFlagsResponse.Merge(m, src)
}
func (m *QueryRateLimiterFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimiterFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimiterFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimiterFlagsResponse proto.InternalMessageInfo

func (m *QueryRateLimiterFlagsResponse) GetRateLimiterFlags() RateLimiterFlags {
	if m != nil {
		return m.RateLimiterFlags
	}
	return RateLimiterFlags{}
}

func init() {
	proto.RegisterType((*QueryZetaAccountingRequest)(nil), "zetachain.zetacore.crosschain.QueryZetaAccountingRequest")
	proto.RegisterType((*QueryZetaAccountingResponse)(nil), "zetachain.zetacore.crosschain.QueryZetaAccountingResponse")
	proto.RegisterType((*QueryGetOutboundTrackerRequest)(nil), "zetachain.zetacore.crosschain.QueryGetOutboundTrackerRequest")
	proto.RegisterType((*QueryGetOutboundTrackerResponse)(nil), "zetachain.zetacore.crosschain.QueryGetOutboundTrackerResponse")
	proto.RegisterType((*QueryAllOutboundTrackerRequest)(nil), "zetachain.zetacore.crosschain.QueryAllOutboundTrackerRequest")
	proto.RegisterType((*QueryAllOutboundTrackerResponse)(nil), "zetachain.zetacore.crosschain.QueryAllOutboundTrackerResponse")
	proto.RegisterType((*QueryAllOutboundTrackerByChainRequest)(nil), "zetachain.zetacore.crosschain.QueryAllOutboundTrackerByChainRequest")
	proto.RegisterType((*QueryAllOutboundTrackerByChainResponse)(nil), "zetachain.zetacore.crosschain.QueryAllOutboundTrackerByChainResponse")
	proto.RegisterType((*QueryAllInboundTrackerByChainRequest)(nil), "zetachain.zetacore.crosschain.QueryAllInboundTrackerByChainRequest")
	proto.RegisterType((*QueryAllInboundTrackerByChainResponse)(nil), "zetachain.zetacore.crosschain.QueryAllInboundTrackerByChainResponse")
	proto.RegisterType((*QueryAllInboundTrackersRequest)(nil), "zetachain.zetacore.crosschain.QueryAllInboundTrackersRequest")
	proto.RegisterType((*QueryAllInboundTrackersResponse)(nil), "zetachain.zetacore.crosschain.QueryAllInboundTrackersResponse")
	proto.RegisterType((*QueryGetInboundHashToCctxRequest)(nil), "zetachain.zetacore.crosschain.QueryGetInboundHashToCctxRequest")
	proto.RegisterType((*QueryGetInboundHashToCctxResponse)(nil), "zetachain.zetacore.crosschain.QueryGetInboundHashToCctxResponse")
	proto.RegisterType((*QueryInboundHashToCctxDataRequest)(nil), "zetachain.zetacore.crosschain.QueryInboundHashToCctxDataRequest")
	proto.RegisterType((*QueryInboundHashToCctxDataResponse)(nil), "zetachain.zetacore.crosschain.QueryInboundHashToCctxDataResponse")
	proto.RegisterType((*QueryAllInboundHashToCctxRequest)(nil), "zetachain.zetacore.crosschain.QueryAllInboundHashToCctxRequest")
	proto.RegisterType((*QueryAllInboundHashToCctxResponse)(nil), "zetachain.zetacore.crosschain.QueryAllInboundHashToCctxResponse")
	proto.RegisterType((*QueryGetGasPriceRequest)(nil), "zetachain.zetacore.crosschain.QueryGetGasPriceRequest")
	proto.RegisterType((*QueryGetGasPriceResponse)(nil), "zetachain.zetacore.crosschain.QueryGetGasPriceResponse")
	proto.RegisterType((*QueryAllGasPriceRequest)(nil), "zetachain.zetacore.crosschain.QueryAllGasPriceRequest")
	proto.RegisterType((*QueryAllGasPriceResponse)(nil), "zetachain.zetacore.crosschain.QueryAllGasPriceResponse")
	proto.RegisterType((*QueryGetLastBlockHeightRequest)(nil), "zetachain.zetacore.crosschain.QueryGetLastBlockHeightRequest")
	proto.RegisterType((*QueryGetLastBlockHeightResponse)(nil), "zetachain.zetacore.crosschain.QueryGetLastBlockHeightResponse")
	proto.RegisterType((*QueryAllLastBlockHeightRequest)(nil), "zetachain.zetacore.crosschain.QueryAllLastBlockHeightRequest")
	proto.RegisterType((*QueryAllLastBlockHeightResponse)(nil), "zetachain.zetacore.crosschain.QueryAllLastBlockHeightResponse")
	proto.RegisterType((*QueryGetCctxRequest)(nil), "zetachain.zetacore.crosschain.QueryGetCctxRequest")
	proto.RegisterType((*QueryGetCctxByNonceRequest)(nil), "zetachain.zetacore.crosschain.QueryGetCctxByNonceRequest")
	proto.RegisterType((*QueryGetCctxResponse)(nil), "zetachain.zetacore.crosschain.QueryGetCctxResponse")
	proto.RegisterType((*QueryAllCctxRequest)(nil), "zetachain.zetacore.crosschain.QueryAllCctxRequest")
	proto.RegisterType((*QueryAllCctxResponse)(nil), "zetachain.zetacore.crosschain.QueryAllCctxResponse")
	proto.RegisterType((*QueryListPendingCctxRequest)(nil), "zetachain.zetacore.crosschain.QueryListPendingCctxRequest")
	proto.RegisterType((*QueryListPendingCctxResponse)(nil), "zetachain.zetacore.crosschain.QueryListPendingCctxResponse")
	proto.RegisterType((*QueryRateLimiterInputRequest)(nil), "zetachain.zetacore.crosschain.QueryRateLimiterInputRequest")
	proto.RegisterType((*QueryRateLimiterInputResponse)(nil), "zetachain.zetacore.crosschain.QueryRateLimiterInputResponse")
	proto.RegisterType((*QueryListPendingCctxWithinRateLimitRequest)(nil), "zetachain.zetacore.crosschain.QueryListPendingCctxWithinRateLimitRequest")
	proto.RegisterType((*QueryListPendingCctxWithinRateLimitResponse)(nil), "zetachain.zetacore.crosschain.QueryListPendingCctxWithinRateLimitResponse")
	proto.RegisterType((*QueryLastZetaHeightRequest)(nil), "zetachain.zetacore.crosschain.QueryLastZetaHeightRequest")
	proto.RegisterType((*QueryLastZetaHeightResponse)(nil), "zetachain.zetacore.crosschain.QueryLastZetaHeightResponse")
	proto.RegisterType((*QueryConvertGasToZetaRequest)(nil), "zetachain.zetacore.crosschain.QueryConvertGasToZetaRequest")
	proto.RegisterType((*QueryConvertGasToZetaResponse)(nil), "zetachain.zetacore.crosschain.QueryConvertGasToZetaResponse")
	proto.RegisterType((*QueryMessagePassingProtocolFeeRequest)(nil), "zetachain.zetacore.crosschain.QueryMessagePassingProtocolFeeRequest")
	proto.RegisterType((*QueryMessagePassingProtocolFeeResponse)(nil), "zetachain.zetacore.crosschain.QueryMessagePassingProtocolFeeResponse")
	proto.RegisterType((*QueryRateLimiterFlagsRequest)(nil), "zetachain.zetacore.crosschain.QueryRateLimiterFlagsRequest")
	proto.RegisterType((*QueryRateLimiterFlagsResponse)(nil), "zetachain.zetacore.crosschain.QueryRateLimiterFlagsResponse")
}

func init() {
	proto.RegisterFile("zetachain/zetacore/crosschain/query.proto", fileDescriptor_d00cb546ea76908b)
}

var fileDescriptor_d00cb546ea76908b = []byte{
	// 2277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xcd, 0x6f, 0x14, 0xc9,
	0x15, 0xa7, 0x3c, 0x98, 0x85, 0x67, 0x30, 0xb8, 0x30, 0xe0, 0x9d, 0x05, 0xc3, 0x36, 0x0b, 0xf6,
	0x42, 0x3c, 0x03, 0x36, 0x36, 0x60, 0xd8, 0x65, 0xfd, 0xc1, 0x87, 0x13, 0x03, 0xde, 0x91, 0x15,
	0x22, 0xa2, 0xa4, 0x55, 0xee, 0xa9, 0xed, 0xe9, 0x6c, 0xbb, 0x7b, 0x76, 0xba, 0x07, 0x9b, 0x45,
	0x3e, 0x64, 0xa5, 0x1c, 0x72, 0x8b, 0xb4, 0x8a, 0x72, 0xc9, 0x35, 0x4a, 0x0e, 0x39, 0xe4, 0x10,
	0xed, 0x25, 0x4a, 0xa4, 0x7c, 0xa3, 0x7c, 0x48, 0x64, 0x23, 0xad, 0xa2, 0x1c, 0xa2, 0x0d, 0x44,
	0xc9, 0x3d, 0x7f, 0x41, 0xd4, 0xd5, 0xaf, 0x67, 0xfa, 0xbb, 0x7b, 0xc6, 0xb3, 0x8a, 0xf7, 0xe4,
	0xe9, 0xae, 0x7a, 0xaf, 0x7e, 0xbf, 0xf7, 0x5e, 0x55, 0xbd, 0xfe, 0xc9, 0xf0, 0xfa, 0xfb, 0xdc,
	0x66, 0x4a, 0x8d, 0x69, 0x46, 0x59, 0xfc, 0x32, 0x1b, 0xbc, 0xac, 0x34, 0x4c, 0xcb, 0x72, 0xdf,
	0xbd, 0xd7, 0xe4, 0x8d, 0xc7, 0xa5, 0x7a, 0xc3, 0xb4, 0x4d, 0x7a, 0xa2, 0x35, 0xb5, 0xe4, 0x4d,
	0x2d, 0xb5, 0xa7, 0x16, 0xcf, 0x29, 0xa6, 0xb5, 0x6e, 0x5a, 0xe5, 0x35, 0x66, 0x71, 0xd7, 0xae,
	0xfc, 0xe8, 0xe2, 0x1a, 0xb7, 0xd9, 0xc5, 0x72, 0x9d, 0xa9, 0x9a, 0xc1, 0x6c, 0xcd, 0x34, 0x5c,
	0x57, 0xc5, 0xc9, 0xf4, 0x55, 0xc5, 0x4f, 0x59, 0xfc, 0x96, 0xed, 0x4d, 0xb4, 0x99, 0x48, 0xb7,
	0x51, 0x99, 0x25, 0xd7, 0x1b, 0x9a, 0xc2, 0x71, 0xfa, 0x95, 0xf4, 0xe9, 0x9a, 0xb1, 0x66, 0x36,
	0x8d, 0xaa, 0x5c, 0x63, 0x56, 0x4d, 0xb6, 0x4d, 0x59, 0x51, 0x5a, 0x0b, 0x4d, 0xe5, 0xb3, 0xb4,
	0x1b, 0x4c, 0x79, 0x97, 0x37, 0xd0, 0x68, 0x3a, 0xdd, 0x48, 0x67, 0x96, 0x2d, 0xaf, 0xe9, 0xa6,
	0xf2, 0xae, 0x5c, 0xe3, 0x9a, 0x5a, 0xb3, 0xd1, 0xec, 0x52, 0xba, 0x99, 0xd9, 0xb4, 0xe3, 0x16,
	0x9b, 0x49, 0xb7, 0x6a, 0x30, 0x9b, 0xcb, 0xba, 0xb6, 0xae, 0xd9, 0xbc, 0x21, 0xbf, 0xa3, 0x33,
	0xd5, 0x42, 0xbb, 0x61, 0xd5, 0x54, 0x4d, 0xf1, 0xb3, 0xec, 0xfc, 0xc2, 0xb7, 0xc7, 0x55, 0xd3,
	0x54, 0x75, 0x5e, 0x66, 0x75, 0xad, 0xcc, 0x0c, 0xc3, 0xb4, 0x45, 0xa6, 0xd0, 0x46, 0x3a, 0x0e,
	0xc5, 0xb7, 0x9d, 0x64, 0x3e, 0xe4, 0x36, 0x9b, 0x53, 0x14, 0xb3, 0x69, 0xd8, 0x9a, 0xa1, 0x56,
	0xf8, 0x7b, 0x4d, 0x6e, 0xd9, 0xd2, 0x5d, 0x78, 0x25, 0x76, 0xd4, 0xaa, 0x9b, 0x86, 0xc5, 0x69,
	0x09, 0x0e, 0xb3, 0x35, 0xb3, 0x61, 0xf3, 0xaa, 0xec, 0x00, 0x95, 0xd9, 0xba, 0x33, 0x63, 0x84,
	0x9c, 0x22, 0xe3, 0xfb, 0x2a, 0x43, 0x38, 0x24, 0x6c, 0xc5, 0x80, 0xb4, 0x02, 0xa3, 0xc2, 0xdd,
	0x6d, 0x6e, 0xdf, 0x47, 0xea, 0xab, 0x2e, 0x73, 0x5c, 0x90, 0x8e, 0xc0, 0x4b, 0x82, 0xe4, 0xd2,
	0xa2, 0xf0, 0x52, 0xa8, 0x78, 0x8f, 0x74, 0x18, 0xfa, 0x0d, 0xd3, 0x50, 0xf8, 0x48, 0xdf, 0x29,
	0x32, 0xbe, 0xbb, 0xe2, 0x3e, 0x48, 0xdf, 0x24, 0x70, 0x32, 0xd1, 0x25, 0xa2, 0xfc, 0x3a, 0x1c,
	0x34, 0x83, 0x43, 0xc2, 0xf7, 0xc0, 0x64, 0xa9, 0x94, 0x5a, 0xf2, 0xa5, 0x90, 0xc3, 0xf9, 0xdd,
	0x4f, 0xff, 0x71, 0x72, 0x57, 0x25, 0xec, 0x4c, 0xaa, 0x21, 0xab, 0x39, 0x5d, 0x4f, 0x60, 0x75,
	0x0b, 0xa0, 0xbd, 0x47, 0x70, 0xf1, 0xb3, 0x25, 0x77, 0x43, 0x95, 0x9c, 0x0d, 0x55, 0x72, 0x37,
	0x22, 0x6e, 0xa8, 0xd2, 0x0a, 0x53, 0x39, 0xda, 0x56, 0x7c, 0x96, 0xd2, 0x1f, 0x3c, 0xb6, 0x71,
	0x4b, 0xa5, 0xb1, 0x2d, 0xf4, 0x8c, 0x2d, 0xbd, 0x1d, 0xe0, 0xd2, 0x27, 0xb8, 0x8c, 0x65, 0x72,
	0x71, 0xc1, 0x05, 0xc8, 0x7c, 0x8b, 0xc0, 0x99, 0x04, 0x32, 0xf3, 0x8f, 0x17, 0x1c, 0x48, 0x5e,
	0xf8, 0x86, 0xa1, 0x5f, 0x40, 0xc4, 0x92, 0x70, 0x1f, 0x42, 0x41, 0xed, 0xeb, 0x3a, 0xa8, 0x7f,
	0x21, 0x70, 0x36, 0x0b, 0xc7, 0xe7, 0x2d, 0xb6, 0xdf, 0x26, 0xf0, 0x9a, 0xc7, 0x69, 0xc9, 0x48,
	0x09, 0xed, 0xcb, 0xb0, 0xd7, 0x3d, 0x87, 0xb5, 0x6a, 0x70, 0xc3, 0x55, 0x7b, 0x16, 0xdf, 0x3f,
	0xfb, 0xf2, 0x9c, 0x80, 0x05, 0xc3, 0xfb, 0x55, 0x18, 0xd4, 0x8c, 0x98, 0xe8, 0x4e, 0x64, 0x44,
	0x37, 0xe4, 0xd5, 0x0d, 0x6e, 0xc8, 0x55, 0xef, 0x62, 0xeb, 0xdb, 0xee, 0xc1, 0x85, 0xad, 0x5e,
	0x6f, 0xf7, 0xdf, 0xfb, 0xb6, 0x7b, 0x64, 0xa9, 0xcf, 0x55, 0xcc, 0x16, 0xe1, 0x94, 0x77, 0x4a,
	0xe3, 0xc2, 0x77, 0x98, 0x55, 0x5b, 0x35, 0x17, 0x14, 0x7b, 0xd3, 0x8b, 0xda, 0x29, 0x18, 0xd0,
	0xda, 0x63, 0x78, 0x89, 0xf8, 0x5f, 0x39, 0x55, 0xfd, 0x6a, 0x8a, 0x1b, 0x8c, 0x48, 0x15, 0x86,
	0xb4, 0xf0, 0x20, 0x26, 0xe1, 0x42, 0xbe, 0xa0, 0xb4, 0xed, 0x30, 0x2e, 0x51, 0x87, 0xd2, 0x4d,
	0x84, 0x12, 0x31, 0x59, 0x64, 0x36, 0xcb, 0x4f, 0x69, 0x0b, 0xa4, 0x34, 0x37, 0x48, 0xe9, 0x01,
	0x1c, 0x58, 0x70, 0x50, 0x8a, 0xed, 0xb2, 0xba, 0x69, 0x61, 0x8e, 0xcf, 0x67, 0xd0, 0xf1, 0xdb,
	0x20, 0x93, 0xa0, 0x1f, 0xe9, 0x1b, 0x98, 0x97, 0x76, 0x81, 0x45, 0xf3, 0xd2, 0xab, 0x6a, 0xfe,
	0xd8, 0xcb, 0x5e, 0xfc, 0x62, 0xe9, 0xd9, 0x2b, 0xf4, 0x34, 0x7b, 0xbd, 0x2b, 0xec, 0x32, 0x1c,
	0xf3, 0x2a, 0xf2, 0x36, 0xb3, 0x56, 0x9c, 0x06, 0xd5, 0x77, 0x6b, 0x69, 0x46, 0x95, 0x6f, 0x62,
	0xda, 0xdd, 0x07, 0x49, 0x86, 0x91, 0xa8, 0x01, 0x72, 0x5f, 0x80, 0xbd, 0xde, 0x3b, 0x8c, 0xf3,
	0x58, 0x06, 0xe5, 0x96, 0x8b, 0x96, 0xa1, 0xc4, 0x10, 0xd1, 0x9c, 0xae, 0x87, 0x11, 0xf5, 0x2a,
	0x93, 0x3f, 0x22, 0x48, 0x22, 0xb0, 0x46, 0x2c, 0x89, 0x42, 0x57, 0x24, 0x7a, 0x97, 0x9f, 0x99,
	0x76, 0xc7, 0xb9, 0xcc, 0x2c, 0x7b, 0xde, 0x69, 0xd1, 0xef, 0x88, 0x0e, 0x3d, 0x3d, 0x4d, 0x4f,
	0xda, 0x6d, 0x65, 0xc4, 0x0e, 0x89, 0x7e, 0x05, 0x0e, 0x86, 0x86, 0x72, 0xb6, 0x95, 0x61, 0x87,
	0x61, 0x37, 0xfe, 0x1b, 0x26, 0x01, 0x74, 0xaf, 0x32, 0xf9, 0x1b, 0xdf, 0x0d, 0xd3, 0x11, 0xcf,
	0x42, 0x0f, 0x78, 0xf6, 0x2e, 0xcb, 0xe7, 0xe1, 0xb0, 0x97, 0x2d, 0xff, 0xc9, 0x15, 0x9f, 0xda,
	0x65, 0xfc, 0xe2, 0xc1, 0xc9, 0xf3, 0x8f, 0xef, 0x39, 0x5f, 0x12, 0xdd, 0x7e, 0x80, 0xa8, 0x30,
	0x1c, 0x5c, 0x1a, 0xa3, 0x76, 0x1f, 0xf6, 0xfb, 0x8f, 0x5a, 0xcc, 0x51, 0x27, 0x27, 0x76, 0x25,
	0xe0, 0x40, 0xfa, 0x1a, 0x72, 0x9c, 0xd3, 0xf5, 0xcf, 0xe2, 0x74, 0xfe, 0x09, 0x41, 0x22, 0x2d,
	0xff, 0x89, 0x44, 0x0a, 0xdb, 0x22, 0xd2, 0xbb, 0xac, 0xdf, 0xc3, 0x8f, 0xd3, 0x65, 0xcd, 0xb2,
	0x57, 0xb8, 0x51, 0xd5, 0x0c, 0xd5, 0x1f, 0x99, 0x94, 0xd6, 0x76, 0x18, 0xfa, 0xc5, 0xf7, 0xb3,
	0x58, 0xfd, 0x40, 0xc5, 0x7d, 0x90, 0x3e, 0x24, 0x70, 0x3c, 0xde, 0xe1, 0x67, 0x15, 0x0a, 0x09,
	0xf6, 0xdb, 0xa6, 0xcd, 0x74, 0x5c, 0x0c, 0x2b, 0x2b, 0xf0, 0x4e, 0x5a, 0x46, 0x50, 0x15, 0x66,
	0xf3, 0x65, 0xf7, 0xa3, 0x7f, 0xc9, 0xa8, 0x37, 0xfd, 0xe7, 0x97, 0xcb, 0x85, 0xf8, 0xb8, 0xd0,
	0xa3, 0xb0, 0x67, 0x43, 0x33, 0xaa, 0xe6, 0x86, 0xf0, 0x59, 0xa8, 0xe0, 0x93, 0xf4, 0xdd, 0x02,
	0x9c, 0x48, 0x70, 0x87, 0x24, 0x8f, 0xc2, 0x9e, 0x5a, 0xfb, 0x34, 0x2b, 0x54, 0xf0, 0x89, 0xde,
	0x83, 0xfd, 0x8a, 0x62, 0x6f, 0x5a, 0xf2, 0xba, 0x66, 0x59, 0xbc, 0x3a, 0xd2, 0xd7, 0x39, 0xf9,
	0x01, 0xe1, 0xe0, 0xae, 0xb0, 0xa7, 0x2b, 0x70, 0xc0, 0xf5, 0x57, 0x47, 0xf2, 0x85, 0x2e, 0xa2,
	0x29, 0x3c, 0x60, 0xa4, 0xe8, 0x69, 0x38, 0x20, 0x22, 0xd7, 0xf2, 0xb8, 0x3b, 0x1a, 0x4e, 0x3a,
	0x0e, 0x87, 0xea, 0xcc, 0xb2, 0x65, 0x77, 0xed, 0x47, 0x4c, 0x6f, 0xf2, 0x91, 0x7e, 0x71, 0x3c,
	0x0c, 0x3a, 0xef, 0x9d, 0x7c, 0x5b, 0x5f, 0x76, 0xde, 0xd2, 0x12, 0x1c, 0x46, 0x47, 0x81, 0xc9,
	0x7b, 0x5c, 0x71, 0xa3, 0xde, 0xae, 0x0f, 0x9c, 0x7f, 0x0d, 0x8a, 0xba, 0xb9, 0xc1, 0x2d, 0x5b,
	0xf6, 0x9b, 0xa1, 0x1e, 0x34, 0xf2, 0x92, 0x08, 0xe6, 0x31, 0x77, 0x86, 0xaf, 0xb8, 0xf0, 0xc8,
	0x9f, 0x87, 0x73, 0x71, 0xa5, 0xf7, 0x40, 0xb3, 0x6b, 0x9a, 0xd1, 0xca, 0x55, 0x6a, 0xce, 0xa5,
	0x5f, 0xf6, 0xc1, 0xf9, 0x5c, 0x4e, 0x30, 0xd3, 0x6f, 0xc3, 0x60, 0x50, 0x89, 0xeb, 0xaa, 0xa0,
	0x15, 0x7f, 0x41, 0x47, 0x52, 0x10, 0x53, 0xd1, 0x74, 0x06, 0x8e, 0x29, 0xcd, 0x46, 0x83, 0x1b,
	0xb6, 0xbc, 0xa1, 0xd9, 0xb5, 0x6a, 0x83, 0x6d, 0xc8, 0x58, 0xac, 0x05, 0x11, 0xa5, 0x23, 0x38,
	0xfc, 0x00, 0x47, 0x1f, 0x88, 0x41, 0x3a, 0x09, 0x47, 0x22, 0x76, 0x0d, 0x66, 0x73, 0x91, 0xe7,
	0x7d, 0x95, 0xc3, 0x21, 0x2b, 0x87, 0xb0, 0x93, 0xc4, 0xb6, 0x5c, 0x26, 0xf3, 0x4d, 0x85, 0xf3,
	0x2a, 0xaf, 0x8a, 0x8c, 0xef, 0xad, 0x0c, 0x35, 0xbc, 0x98, 0xdc, 0xc4, 0x81, 0x96, 0x1c, 0xe6,
	0x5c, 0x55, 0x0f, 0xb9, 0xcd, 0x02, 0xd7, 0xae, 0x34, 0xed, 0x9d, 0x38, 0xa1, 0xd1, 0xf6, 0xd6,
	0xb9, 0x13, 0xd8, 0x3a, 0x98, 0xdc, 0x55, 0xdc, 0xc2, 0x0b, 0xa6, 0xf1, 0x88, 0x37, 0x9c, 0xbe,
	0x6f, 0xd5, 0x74, 0xcc, 0x23, 0x77, 0x4e, 0xe4, 0xa0, 0x2a, 0xc2, 0x5e, 0x95, 0x59, 0xcb, 0xad,
	0xb3, 0x6a, 0x5f, 0xa5, 0xf5, 0x2c, 0xfd, 0x80, 0xe0, 0x56, 0x8e, 0xba, 0x45, 0x3c, 0x5f, 0x80,
	0x21, 0x4f, 0x61, 0xb8, 0xcd, 0xac, 0x25, 0xc3, 0x19, 0xf4, 0xc4, 0xb9, 0xc8, 0x80, 0x33, 0x5b,
	0x48, 0x82, 0x8a, 0xa9, 0xdf, 0xe2, 0x1c, 0x67, 0xf7, 0x61, 0xb5, 0x87, 0x07, 0xe8, 0x38, 0x1c,
	0x74, 0xfe, 0xfa, 0xbb, 0x82, 0x82, 0xc8, 0x75, 0xf8, 0xb5, 0x34, 0x86, 0x9f, 0xff, 0x77, 0xb9,
	0x65, 0x31, 0x95, 0xaf, 0x30, 0xcb, 0xd2, 0x0c, 0x75, 0xa5, 0xed, 0xd1, 0x8b, 0xee, 0x2d, 0xd4,
	0x61, 0x52, 0x26, 0x22, 0xb1, 0xe3, 0xb0, 0xef, 0x9d, 0x16, 0x44, 0x97, 0x50, 0xfb, 0x85, 0x34,
	0x1a, 0x3d, 0x31, 0x6f, 0xe9, 0x4c, 0xf5, 0x3e, 0xcf, 0xa5, 0x0f, 0x48, 0xf4, 0x0c, 0xc4, 0x09,
	0xe8, 0x9f, 0xc1, 0xa1, 0x46, 0x68, 0x0c, 0xaf, 0xd6, 0x72, 0xc6, 0xde, 0x08, 0xbb, 0xc4, 0x4f,
	0x90, 0x88, 0xbb, 0xc9, 0x4f, 0x2e, 0x40, 0xbf, 0x00, 0x41, 0x3f, 0x26, 0x70, 0x30, 0xa4, 0x0f,
	0xd1, 0x37, 0x32, 0x96, 0x49, 0x57, 0x51, 0x8b, 0x6f, 0x76, 0x6b, 0xee, 0xf2, 0x97, 0xde, 0xfa,
	0xe0, 0xaf, 0xff, 0xfa, 0xb0, 0x6f, 0x96, 0x5e, 0x11, 0xfa, 0xf3, 0x84, 0x4f, 0xb5, 0x0f, 0xea,
	0xd6, 0x68, 0x57, 0x7e, 0x82, 0x3d, 0xd2, 0x56, 0xf9, 0x89, 0xe8, 0x8a, 0xb6, 0xe8, 0xaf, 0x09,
	0xd0, 0x90, 0xf7, 0x39, 0x5d, 0xcf, 0xc7, 0x2b, 0x51, 0x47, 0xcd, 0xc7, 0x2b, 0x59, 0x1b, 0x95,
	0x4a, 0x82, 0xd7, 0x38, 0x3d, 0x9b, 0x8f, 0x17, 0xfd, 0x0f, 0x81, 0x97, 0xa3, 0x2c, 0x50, 0xb6,
	0xa2, 0x8b, 0xdd, 0xa1, 0x09, 0x2a, 0x70, 0xc5, 0x9b, 0xdb, 0xf4, 0x82, 0xd4, 0xde, 0x10, 0xd4,
	0x2e, 0xd3, 0xe9, 0x7c, 0xd4, 0xd0, 0x1c, 0x33, 0xb7, 0x45, 0xff, 0x4d, 0x60, 0x24, 0x28, 0x09,
	0xf9, 0x88, 0x2e, 0xe4, 0x84, 0x98, 0xa6, 0x34, 0x16, 0x17, 0xb7, 0xe7, 0x04, 0x69, 0xde, 0x10,
	0x34, 0xaf, 0xd2, 0xcb, 0x09, 0x34, 0x35, 0x23, 0x99, 0xa5, 0xac, 0x55, 0xb7, 0xe8, 0xaf, 0x08,
	0x0c, 0x45, 0x88, 0xe6, 0xae, 0xcb, 0x78, 0xc1, 0x2f, 0x77, 0x5d, 0x26, 0x88, 0x78, 0x99, 0x75,
	0x19, 0x64, 0x65, 0xd1, 0x4f, 0xda, 0x24, 0x7c, 0xa2, 0xc6, 0x8d, 0x9c, 0xbb, 0x3e, 0x49, 0xe9,
	0x29, 0xbe, 0xd5, 0xbd, 0x03, 0x24, 0xf2, 0xa6, 0x20, 0x72, 0x85, 0xce, 0xa4, 0x13, 0x69, 0x5b,
	0x96, 0x9f, 0xf8, 0x5e, 0x6d, 0xd1, 0x4f, 0x09, 0x1c, 0x89, 0x95, 0xc2, 0x68, 0x2e, 0x6c, 0x69,
	0x62, 0x5c, 0x71, 0x6e, 0x1b, 0x1e, 0x90, 0xde, 0xbc, 0xa0, 0x77, 0x9d, 0xce, 0xe6, 0xa5, 0xe7,
	0x58, 0x87, 0x28, 0xfe, 0x91, 0xc0, 0x70, 0x64, 0x15, 0xa7, 0x06, 0x6f, 0x74, 0x56, 0x44, 0x5d,
	0xa6, 0x2f, 0x4d, 0x7c, 0x93, 0x2e, 0x08, 0x7e, 0xe7, 0xe8, 0x78, 0x5e, 0x7e, 0xf4, 0xc7, 0xa4,
	0x2d, 0xf7, 0xd0, 0x99, 0x9c, 0xf5, 0x13, 0xd2, 0xa5, 0x8a, 0x97, 0x3b, 0xb6, 0x43, 0xbc, 0x65,
	0x81, 0xf7, 0x75, 0x3a, 0x96, 0x80, 0x57, 0x45, 0x03, 0x27, 0x05, 0x55, 0xbe, 0xb9, 0x45, 0x7f,
	0x48, 0x60, 0xc0, 0xf3, 0xe2, 0xc4, 0x7c, 0x26, 0x67, 0xc8, 0xba, 0x42, 0x1c, 0xa3, 0x8e, 0x49,
	0x63, 0x02, 0xf1, 0xab, 0xf4, 0x64, 0x06, 0x62, 0xfa, 0x0b, 0x02, 0x87, 0xc2, 0x8d, 0x1d, 0xbd,
	0x96, 0x67, 0xd9, 0x84, 0x2e, 0xb3, 0x78, 0xbd, 0x3b, 0xe3, 0x9c, 0xa1, 0x56, 0xc2, 0x58, 0x7f,
	0x47, 0x60, 0xc0, 0xd7, 0xbb, 0xe5, 0xbb, 0x2d, 0xb3, 0x7a, 0xc4, 0x7c, 0xb7, 0x65, 0x66, 0x03,
	0x29, 0x9d, 0x13, 0x6c, 0x5e, 0xa3, 0x52, 0x02, 0x1b, 0x5f, 0xbf, 0x4b, 0x9f, 0x92, 0x88, 0x00,
	0x96, 0xbb, 0x3f, 0x8b, 0x97, 0xef, 0x72, 0xf7, 0x67, 0x09, 0x92, 0x9c, 0x34, 0x23, 0xe0, 0x5f,
	0xa0, 0xa5, 0x04, 0xf8, 0x7a, 0xd0, 0xae, 0x55, 0xfe, 0x4e, 0x57, 0x16, 0xf2, 0xd9, 0xc9, 0xed,
	0xb7, 0x1d, 0x36, 0xc9, 0x02, 0x63, 0xe6, 0xed, 0x17, 0x62, 0x43, 0xbf, 0x4f, 0x60, 0xb7, 0x38,
	0x7c, 0x26, 0x73, 0x86, 0xd1, 0x7f, 0x48, 0x4e, 0x75, 0x64, 0x83, 0x08, 0xcf, 0x0b, 0x84, 0x67,
	0xe8, 0xe9, 0xa4, 0xe2, 0xc7, 0x9b, 0x4c, 0x04, 0xf9, 0xa7, 0x04, 0x06, 0x7c, 0xc2, 0x22, 0xbd,
	0xda, 0xc1, 0x8a, 0x41, 0x31, 0xb2, 0x3b, 0xb0, 0xd3, 0x02, 0x6c, 0x99, 0x4e, 0xa4, 0x82, 0x8d,
	0x74, 0xec, 0xdf, 0x23, 0xf0, 0x92, 0x77, 0x15, 0x4d, 0xe6, 0xcc, 0x68, 0xc7, 0x81, 0x0d, 0x89,
	0x8b, 0xd2, 0x69, 0x81, 0xf5, 0x04, 0x7d, 0x25, 0x05, 0x2b, 0xfd, 0xc8, 0xd9, 0x80, 0x41, 0x49,
	0x83, 0xce, 0xe6, 0x59, 0x2d, 0x5e, 0x18, 0x2c, 0x5e, 0xeb, 0xca, 0x36, 0xef, 0xc9, 0xe1, 0x03,
	0xf9, 0x5f, 0x02, 0xa3, 0xe9, 0x5a, 0x0c, 0x5d, 0xea, 0x02, 0x4b, 0xbc, 0x28, 0x54, 0xfc, 0x62,
	0x2f, 0x5c, 0x21, 0xcb, 0xab, 0x82, 0xe5, 0x14, 0xbd, 0x98, 0xcd, 0x32, 0xcc, 0xe8, 0x23, 0x02,
	0x83, 0xc1, 0x7f, 0x17, 0xca, 0xb7, 0x03, 0x62, 0xff, 0x01, 0xa9, 0x38, 0xdb, 0x8d, 0x29, 0x92,
	0x98, 0x10, 0x24, 0xc6, 0xe8, 0x99, 0x04, 0x12, 0xef, 0x07, 0x51, 0x3a, 0xc0, 0x83, 0xc2, 0x4e,
	0x3e, 0xe0, 0xb1, 0x52, 0x51, 0x3e, 0xe0, 0xf1, 0x3a, 0x52, 0x26, 0x70, 0x3d, 0x88, 0xd2, 0x69,
	0x15, 0xc2, 0xba, 0x43, 0xbe, 0x56, 0x21, 0x41, 0x21, 0xc9, 0xd7, 0x2a, 0x24, 0xa9, 0x27, 0x99,
	0xad, 0x42, 0x58, 0x0b, 0x09, 0x13, 0x10, 0x7a, 0x74, 0xc7, 0x04, 0xfc, 0xa2, 0x78, 0xc7, 0x04,
	0x02, 0x12, 0x78, 0x27, 0x04, 0x5c, 0xac, 0x7f, 0x22, 0xb0, 0xff, 0x7e, 0xd3, 0x5e, 0xdd, 0xdc,
	0x21, 0xfa, 0x4d, 0x0e, 0x31, 0xa0, 0x85, 0x35, 0xe6, 0x2a, 0xf8, 0xb9, 0xab, 0x48, 0xb5, 0xa6,
	0xec, 0x00, 0xe5, 0x26, 0xeb, 0x06, 0xf6, 0x33, 0xa2, 0xff, 0x24, 0x70, 0x34, 0x84, 0x7f, 0x47,
	0x6a, 0x36, 0xb3, 0x82, 0xd4, 0x25, 0x3a, 0x99, 0x83, 0x54, 0x58, 0xb0, 0x71, 0xbf, 0x94, 0xe3,
	0x28, 0xee, 0x20, 0xb5, 0xe6, 0xba, 0x20, 0x38, 0x43, 0x2f, 0x25, 0x7e, 0x4f, 0x26, 0xf0, 0x13,
	0x52, 0xcd, 0xcf, 0x08, 0x0c, 0x06, 0x29, 0xfe, 0xbf, 0x75, 0x9a, 0xac, 0xcb, 0xdf, 0xc7, 0x87,
	0x3e, 0x43, 0xf4, 0x3b, 0x4b, 0xa0, 0xb9, 0x26, 0x18, 0x4c, 0xd3, 0xa9, 0x14, 0x06, 0x89, 0xea,
	0xcc, 0xdf, 0x09, 0xd0, 0x20, 0xa5, 0x9d, 0x23, 0xcd, 0x64, 0x0b, 0x83, 0x61, 0xdc, 0x21, 0x72,
	0xbf, 0x15, 0x9a, 0x9a, 0x7f, 0xd2, 0x0e, 0x11, 0x65, 0xb2, 0xba, 0x81, 0x20, 0xb3, 0xf9, 0x2f,
	0x3d, 0x7d, 0x3e, 0x4a, 0x9e, 0x3d, 0x1f, 0x25, 0x9f, 0x3e, 0x1f, 0x25, 0xdf, 0x79, 0x31, 0xba,
	0xeb, 0xd9, 0x8b, 0xd1, 0x5d, 0x7f, 0x7b, 0x31, 0xba, 0xeb, 0xe1, 0x45, 0x55, 0xb3, 0x6b, 0xcd,
	0xb5, 0x92, 0x62, 0xae, 0xfb, 0x5d, 0xb5, 0xfe, 0xc5, 0x7c, 0xd3, 0xef, 0xd5, 0x7e, 0x5c, 0xe7,
	0xd6, 0xda, 0x1e, 0xf1, 0x21, 0x3c, 0xf5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xf9, 0x7b,
	0x83, 0x47, 0x30, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a outbound tracker by index.
	OutboundTracker(ctx context.Context, in *QueryGetOutboundTrackerRequest, opts ...grpc.CallOption) (*QueryGetOutboundTrackerResponse, error)
	// Queries a list of OutboundTracker items.
	OutboundTrackerAll(ctx context.Context, in *QueryAllOutboundTrackerRequest, opts ...grpc.CallOption) (*QueryAllOutboundTrackerResponse, error)
	OutboundTrackerAllByChain(ctx context.Context, in *QueryAllOutboundTrackerByChainRequest, opts ...grpc.CallOption) (*QueryAllOutboundTrackerByChainResponse, error)
	InboundTrackerAllByChain(ctx context.Context, in *QueryAllInboundTrackerByChainRequest, opts ...grpc.CallOption) (*QueryAllInboundTrackerByChainResponse, error)
	InboundTrackerAll(ctx context.Context, in *QueryAllInboundTrackersRequest, opts ...grpc.CallOption) (*QueryAllInboundTrackersResponse, error)
	// Queries a InboundHashToCctx by index.
	InboundHashToCctx(ctx context.Context, in *QueryGetInboundHashToCctxRequest, opts ...grpc.CallOption) (*QueryGetInboundHashToCctxResponse, error)
	// Queries a InboundHashToCctx data by index.
	InboundHashToCctxData(ctx context.Context, in *QueryInboundHashToCctxDataRequest, opts ...grpc.CallOption) (*QueryInboundHashToCctxDataResponse, error)
	// Queries a list of InboundHashToCctx items.
	InboundHashToCctxAll(ctx context.Context, in *QueryAllInboundHashToCctxRequest, opts ...grpc.CallOption) (*QueryAllInboundHashToCctxResponse, error)
	// Queries a gasPrice by index.
	GasPrice(ctx context.Context, in *QueryGetGasPriceRequest, opts ...grpc.CallOption) (*QueryGetGasPriceResponse, error)
	// Queries a list of gasPrice items.
	GasPriceAll(ctx context.Context, in *QueryAllGasPriceRequest, opts ...grpc.CallOption) (*QueryAllGasPriceResponse, error)
	ConvertGasToZeta(ctx context.Context, in *QueryConvertGasToZetaRequest, opts ...grpc.CallOption) (*QueryConvertGasToZetaResponse, error)
	ProtocolFee(ctx context.Context, in *QueryMessagePassingProtocolFeeRequest, opts ...grpc.CallOption) (*QueryMessagePassingProtocolFeeResponse, error)
	// Queries a lastBlockHeight by index.
	LastBlockHeight(ctx context.Context, in *QueryGetLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryGetLastBlockHeightResponse, error)
	// Queries a list of lastBlockHeight items.
	LastBlockHeightAll(ctx context.Context, in *QueryAllLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryAllLastBlockHeightResponse, error)
	// Queries a send by index.
	Cctx(ctx context.Context, in *QueryGetCctxRequest, opts ...grpc.CallOption) (*QueryGetCctxResponse, error)
	// Queries a cctx by nonce.
	CctxByNonce(ctx context.Context, in *QueryGetCctxByNonceRequest, opts ...grpc.CallOption) (*QueryGetCctxResponse, error)
	// Queries a list of cctxx items.
	CctxAll(ctx context.Context, in *QueryAllCctxRequest, opts ...grpc.CallOption) (*QueryAllCctxResponse, error)
	// Queries a list of pending cctxs.
	ListPendingCctx(ctx context.Context, in *QueryListPendingCctxRequest, opts ...grpc.CallOption) (*QueryListPendingCctxResponse, error)
	// Queries a list of pending cctxs within rate limit.
	ListPendingCctxWithinRateLimit(ctx context.Context, in *QueryListPendingCctxWithinRateLimitRequest, opts ...grpc.CallOption) (*QueryListPendingCctxWithinRateLimitResponse, error)
	ZetaAccounting(ctx context.Context, in *QueryZetaAccountingRequest, opts ...grpc.CallOption) (*QueryZetaAccountingResponse, error)
	// Queries a list of lastMetaHeight items.
	LastZetaHeight(ctx context.Context, in *QueryLastZetaHeightRequest, opts ...grpc.CallOption) (*QueryLastZetaHeightResponse, error)
	// Queries the rate limiter flags
	RateLimiterFlags(ctx context.Context, in *QueryRateLimiterFlagsRequest, opts ...grpc.CallOption) (*QueryRateLimiterFlagsResponse, error)
	// Queries the input data of rate limiter.
	RateLimiterInput(ctx context.Context, in *QueryRateLimiterInputRequest, opts ...grpc.CallOption) (*QueryRateLimiterInputResponse, error)
	// Deprecated(v17): use OutboundTracker
	OutTxTracker(ctx context.Context, in *QueryGetOutboundTrackerRequest, opts ...grpc.CallOption) (*QueryGetOutboundTrackerResponse, error)
	// Deprecated(v17): use OutboundTrackerAll
	OutTxTrackerAll(ctx context.Context, in *QueryAllOutboundTrackerRequest, opts ...grpc.CallOption) (*QueryAllOutboundTrackerResponse, error)
	// Deprecated(v17): use OutboundTrackerAllByChain
	OutTxTrackerAllByChain(ctx context.Context, in *QueryAllOutboundTrackerByChainRequest, opts ...grpc.CallOption) (*QueryAllOutboundTrackerByChainResponse, error)
	// Deprecated(v17): use InboundTrackerAllByChain
	InTxTrackerAllByChain(ctx context.Context, in *QueryAllInboundTrackerByChainRequest, opts ...grpc.CallOption) (*QueryAllInboundTrackerByChainResponse, error)
	// Deprecated(v17): use InboundTrackerAll
	InTxTrackerAll(ctx context.Context, in *QueryAllInboundTrackersRequest, opts ...grpc.CallOption) (*QueryAllInboundTrackersResponse, error)
	// Deprecated(v17): use InboundHashToCctx
	InTxHashToCctx(ctx context.Context, in *QueryGetInboundHashToCctxRequest, opts ...grpc.CallOption) (*QueryGetInboundHashToCctxResponse, error)
	// Deprecated(v17): use InboundHashToCctxData
	InTxHashToCctxData(ctx context.Context, in *QueryInboundHashToCctxDataRequest, opts ...grpc.CallOption) (*QueryInboundHashToCctxDataResponse, error)
	// Deprecated(v17): use InboundHashToCctxAll
	InTxHashToCctxAll(ctx context.Context, in *QueryAllInboundHashToCctxRequest, opts ...grpc.CallOption) (*QueryAllInboundHashToCctxResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) OutboundTracker(ctx context.Context, in *QueryGetOutboundTrackerRequest, opts ...grpc.CallOption) (*QueryGetOutboundTrackerResponse, error) {
	out := new(QueryGetOutboundTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/OutboundTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutboundTrackerAll(ctx context.Context, in *QueryAllOutboundTrackerRequest, opts ...grpc.CallOption) (*QueryAllOutboundTrackerResponse, error) {
	out := new(QueryAllOutboundTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/OutboundTrackerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutboundTrackerAllByChain(ctx context.Context, in *QueryAllOutboundTrackerByChainRequest, opts ...grpc.CallOption) (*QueryAllOutboundTrackerByChainResponse, error) {
	out := new(QueryAllOutboundTrackerByChainResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/OutboundTrackerAllByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InboundTrackerAllByChain(ctx context.Context, in *QueryAllInboundTrackerByChainRequest, opts ...grpc.CallOption) (*QueryAllInboundTrackerByChainResponse, error) {
	out := new(QueryAllInboundTrackerByChainResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InboundTrackerAllByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InboundTrackerAll(ctx context.Context, in *QueryAllInboundTrackersRequest, opts ...grpc.CallOption) (*QueryAllInboundTrackersResponse, error) {
	out := new(QueryAllInboundTrackersResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InboundTrackerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InboundHashToCctx(ctx context.Context, in *QueryGetInboundHashToCctxRequest, opts ...grpc.CallOption) (*QueryGetInboundHashToCctxResponse, error) {
	out := new(QueryGetInboundHashToCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InboundHashToCctx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InboundHashToCctxData(ctx context.Context, in *QueryInboundHashToCctxDataRequest, opts ...grpc.CallOption) (*QueryInboundHashToCctxDataResponse, error) {
	out := new(QueryInboundHashToCctxDataResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InboundHashToCctxData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InboundHashToCctxAll(ctx context.Context, in *QueryAllInboundHashToCctxRequest, opts ...grpc.CallOption) (*QueryAllInboundHashToCctxResponse, error) {
	out := new(QueryAllInboundHashToCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InboundHashToCctxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPrice(ctx context.Context, in *QueryGetGasPriceRequest, opts ...grpc.CallOption) (*QueryGetGasPriceResponse, error) {
	out := new(QueryGetGasPriceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPriceAll(ctx context.Context, in *QueryAllGasPriceRequest, opts ...grpc.CallOption) (*QueryAllGasPriceResponse, error) {
	out := new(QueryAllGasPriceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/GasPriceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConvertGasToZeta(ctx context.Context, in *QueryConvertGasToZetaRequest, opts ...grpc.CallOption) (*QueryConvertGasToZetaResponse, error) {
	out := new(QueryConvertGasToZetaResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ConvertGasToZeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProtocolFee(ctx context.Context, in *QueryMessagePassingProtocolFeeRequest, opts ...grpc.CallOption) (*QueryMessagePassingProtocolFeeResponse, error) {
	out := new(QueryMessagePassingProtocolFeeResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ProtocolFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBlockHeight(ctx context.Context, in *QueryGetLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryGetLastBlockHeightResponse, error) {
	out := new(QueryGetLastBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/LastBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBlockHeightAll(ctx context.Context, in *QueryAllLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryAllLastBlockHeightResponse, error) {
	out := new(QueryAllLastBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/LastBlockHeightAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Cctx(ctx context.Context, in *QueryGetCctxRequest, opts ...grpc.CallOption) (*QueryGetCctxResponse, error) {
	out := new(QueryGetCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/Cctx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CctxByNonce(ctx context.Context, in *QueryGetCctxByNonceRequest, opts ...grpc.CallOption) (*QueryGetCctxResponse, error) {
	out := new(QueryGetCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/CctxByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CctxAll(ctx context.Context, in *QueryAllCctxRequest, opts ...grpc.CallOption) (*QueryAllCctxResponse, error) {
	out := new(QueryAllCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/CctxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPendingCctx(ctx context.Context, in *QueryListPendingCctxRequest, opts ...grpc.CallOption) (*QueryListPendingCctxResponse, error) {
	out := new(QueryListPendingCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ListPendingCctx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPendingCctxWithinRateLimit(ctx context.Context, in *QueryListPendingCctxWithinRateLimitRequest, opts ...grpc.CallOption) (*QueryListPendingCctxWithinRateLimitResponse, error) {
	out := new(QueryListPendingCctxWithinRateLimitResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ListPendingCctxWithinRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ZetaAccounting(ctx context.Context, in *QueryZetaAccountingRequest, opts ...grpc.CallOption) (*QueryZetaAccountingResponse, error) {
	out := new(QueryZetaAccountingResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/ZetaAccounting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastZetaHeight(ctx context.Context, in *QueryLastZetaHeightRequest, opts ...grpc.CallOption) (*QueryLastZetaHeightResponse, error) {
	out := new(QueryLastZetaHeightResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/LastZetaHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RateLimiterFlags(ctx context.Context, in *QueryRateLimiterFlagsRequest, opts ...grpc.CallOption) (*QueryRateLimiterFlagsResponse, error) {
	out := new(QueryRateLimiterFlagsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/RateLimiterFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RateLimiterInput(ctx context.Context, in *QueryRateLimiterInputRequest, opts ...grpc.CallOption) (*QueryRateLimiterInputResponse, error) {
	out := new(QueryRateLimiterInputResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/RateLimiterInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutTxTracker(ctx context.Context, in *QueryGetOutboundTrackerRequest, opts ...grpc.CallOption) (*QueryGetOutboundTrackerResponse, error) {
	out := new(QueryGetOutboundTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/OutTxTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutTxTrackerAll(ctx context.Context, in *QueryAllOutboundTrackerRequest, opts ...grpc.CallOption) (*QueryAllOutboundTrackerResponse, error) {
	out := new(QueryAllOutboundTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/OutTxTrackerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutTxTrackerAllByChain(ctx context.Context, in *QueryAllOutboundTrackerByChainRequest, opts ...grpc.CallOption) (*QueryAllOutboundTrackerByChainResponse, error) {
	out := new(QueryAllOutboundTrackerByChainResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/OutTxTrackerAllByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxTrackerAllByChain(ctx context.Context, in *QueryAllInboundTrackerByChainRequest, opts ...grpc.CallOption) (*QueryAllInboundTrackerByChainResponse, error) {
	out := new(QueryAllInboundTrackerByChainResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InTxTrackerAllByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxTrackerAll(ctx context.Context, in *QueryAllInboundTrackersRequest, opts ...grpc.CallOption) (*QueryAllInboundTrackersResponse, error) {
	out := new(QueryAllInboundTrackersResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InTxTrackerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxHashToCctx(ctx context.Context, in *QueryGetInboundHashToCctxRequest, opts ...grpc.CallOption) (*QueryGetInboundHashToCctxResponse, error) {
	out := new(QueryGetInboundHashToCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InTxHashToCctx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxHashToCctxData(ctx context.Context, in *QueryInboundHashToCctxDataRequest, opts ...grpc.CallOption) (*QueryInboundHashToCctxDataResponse, error) {
	out := new(QueryInboundHashToCctxDataResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InTxHashToCctxData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxHashToCctxAll(ctx context.Context, in *QueryAllInboundHashToCctxRequest, opts ...grpc.CallOption) (*QueryAllInboundHashToCctxResponse, error) {
	out := new(QueryAllInboundHashToCctxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.crosschain.Query/InTxHashToCctxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a outbound tracker by index.
	OutboundTracker(context.Context, *QueryGetOutboundTrackerRequest) (*QueryGetOutboundTrackerResponse, error)
	// Queries a list of OutboundTracker items.
	OutboundTrackerAll(context.Context, *QueryAllOutboundTrackerRequest) (*QueryAllOutboundTrackerResponse, error)
	OutboundTrackerAllByChain(context.Context, *QueryAllOutboundTrackerByChainRequest) (*QueryAllOutboundTrackerByChainResponse, error)
	InboundTrackerAllByChain(context.Context, *QueryAllInboundTrackerByChainRequest) (*QueryAllInboundTrackerByChainResponse, error)
	InboundTrackerAll(context.Context, *QueryAllInboundTrackersRequest) (*QueryAllInboundTrackersResponse, error)
	// Queries a InboundHashToCctx by index.
	InboundHashToCctx(context.Context, *QueryGetInboundHashToCctxRequest) (*QueryGetInboundHashToCctxResponse, error)
	// Queries a InboundHashToCctx data by index.
	InboundHashToCctxData(context.Context, *QueryInboundHashToCctxDataRequest) (*QueryInboundHashToCctxDataResponse, error)
	// Queries a list of InboundHashToCctx items.
	InboundHashToCctxAll(context.Context, *QueryAllInboundHashToCctxRequest) (*QueryAllInboundHashToCctxResponse, error)
	// Queries a gasPrice by index.
	GasPrice(context.Context, *QueryGetGasPriceRequest) (*QueryGetGasPriceResponse, error)
	// Queries a list of gasPrice items.
	GasPriceAll(context.Context, *QueryAllGasPriceRequest) (*QueryAllGasPriceResponse, error)
	ConvertGasToZeta(context.Context, *QueryConvertGasToZetaRequest) (*QueryConvertGasToZetaResponse, error)
	ProtocolFee(context.Context, *QueryMessagePassingProtocolFeeRequest) (*QueryMessagePassingProtocolFeeResponse, error)
	// Queries a lastBlockHeight by index.
	LastBlockHeight(context.Context, *QueryGetLastBlockHeightRequest) (*QueryGetLastBlockHeightResponse, error)
	// Queries a list of lastBlockHeight items.
	LastBlockHeightAll(context.Context, *QueryAllLastBlockHeightRequest) (*QueryAllLastBlockHeightResponse, error)
	// Queries a send by index.
	Cctx(context.Context, *QueryGetCctxRequest) (*QueryGetCctxResponse, error)
	// Queries a cctx by nonce.
	CctxByNonce(context.Context, *QueryGetCctxByNonceRequest) (*QueryGetCctxResponse, error)
	// Queries a list of cctxx items.
	CctxAll(context.Context, *QueryAllCctxRequest) (*QueryAllCctxResponse, error)
	// Queries a list of pending cctxs.
	ListPendingCctx(context.Context, *QueryListPendingCctxRequest) (*QueryListPendingCctxResponse, error)
	// Queries a list of pending cctxs within rate limit.
	ListPendingCctxWithinRateLimit(context.Context, *QueryListPendingCctxWithinRateLimitRequest) (*QueryListPendingCctxWithinRateLimitResponse, error)
	ZetaAccounting(context.Context, *QueryZetaAccountingRequest) (*QueryZetaAccountingResponse, error)
	// Queries a list of lastMetaHeight items.
	LastZetaHeight(context.Context, *QueryLastZetaHeightRequest) (*QueryLastZetaHeightResponse, error)
	// Queries the rate limiter flags
	RateLimiterFlags(context.Context, *QueryRateLimiterFlagsRequest) (*QueryRateLimiterFlagsResponse, error)
	// Queries the input data of rate limiter.
	RateLimiterInput(context.Context, *QueryRateLimiterInputRequest) (*QueryRateLimiterInputResponse, error)
	// Deprecated(v17): use OutboundTracker
	OutTxTracker(context.Context, *QueryGetOutboundTrackerRequest) (*QueryGetOutboundTrackerResponse, error)
	// Deprecated(v17): use OutboundTrackerAll
	OutTxTrackerAll(context.Context, *QueryAllOutboundTrackerRequest) (*QueryAllOutboundTrackerResponse, error)
	// Deprecated(v17): use OutboundTrackerAllByChain
	OutTxTrackerAllByChain(context.Context, *QueryAllOutboundTrackerByChainRequest) (*QueryAllOutboundTrackerByChainResponse, error)
	// Deprecated(v17): use InboundTrackerAllByChain
	InTxTrackerAllByChain(context.Context, *QueryAllInboundTrackerByChainRequest) (*QueryAllInboundTrackerByChainResponse, error)
	// Deprecated(v17): use InboundTrackerAll
	InTxTrackerAll(context.Context, *QueryAllInboundTrackersRequest) (*QueryAllInboundTrackersResponse, error)
	// Deprecated(v17): use InboundHashToCctx
	InTxHashToCctx(context.Context, *QueryGetInboundHashToCctxRequest) (*QueryGetInboundHashToCctxResponse, error)
	// Deprecated(v17): use InboundHashToCctxData
	InTxHashToCctxData(context.Context, *QueryInboundHashToCctxDataRequest) (*QueryInboundHashToCctxDataResponse, error)
	// Deprecated(v17): use InboundHashToCctxAll
	InTxHashToCctxAll(context.Context, *QueryAllInboundHashToCctxRequest) (*QueryAllInboundHashToCctxResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) OutboundTracker(ctx context.Context, req *QueryGetOutboundTrackerRequest) (*QueryGetOutboundTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundTracker not implemented")
}
func (*UnimplementedQueryServer) OutboundTrackerAll(ctx context.Context, req *QueryAllOutboundTrackerRequest) (*QueryAllOutboundTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundTrackerAll not implemented")
}
func (*UnimplementedQueryServer) OutboundTrackerAllByChain(ctx context.Context, req *QueryAllOutboundTrackerByChainRequest) (*QueryAllOutboundTrackerByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundTrackerAllByChain not implemented")
}
func (*UnimplementedQueryServer) InboundTrackerAllByChain(ctx context.Context, req *QueryAllInboundTrackerByChainRequest) (*QueryAllInboundTrackerByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboundTrackerAllByChain not implemented")
}
func (*UnimplementedQueryServer) InboundTrackerAll(ctx context.Context, req *QueryAllInboundTrackersRequest) (*QueryAllInboundTrackersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboundTrackerAll not implemented")
}
func (*UnimplementedQueryServer) InboundHashToCctx(ctx context.Context, req *QueryGetInboundHashToCctxRequest) (*QueryGetInboundHashToCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboundHashToCctx not implemented")
}
func (*UnimplementedQueryServer) InboundHashToCctxData(ctx context.Context, req *QueryInboundHashToCctxDataRequest) (*QueryInboundHashToCctxDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboundHashToCctxData not implemented")
}
func (*UnimplementedQueryServer) InboundHashToCctxAll(ctx context.Context, req *QueryAllInboundHashToCctxRequest) (*QueryAllInboundHashToCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboundHashToCctxAll not implemented")
}
func (*UnimplementedQueryServer) GasPrice(ctx context.Context, req *QueryGetGasPriceRequest) (*QueryGetGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrice not implemented")
}
func (*UnimplementedQueryServer) GasPriceAll(ctx context.Context, req *QueryAllGasPriceRequest) (*QueryAllGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPriceAll not implemented")
}
func (*UnimplementedQueryServer) ConvertGasToZeta(ctx context.Context, req *QueryConvertGasToZetaRequest) (*QueryConvertGasToZetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertGasToZeta not implemented")
}
func (*UnimplementedQueryServer) ProtocolFee(ctx context.Context, req *QueryMessagePassingProtocolFeeRequest) (*QueryMessagePassingProtocolFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolFee not implemented")
}
func (*UnimplementedQueryServer) LastBlockHeight(ctx context.Context, req *QueryGetLastBlockHeightRequest) (*QueryGetLastBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlockHeight not implemented")
}
func (*UnimplementedQueryServer) LastBlockHeightAll(ctx context.Context, req *QueryAllLastBlockHeightRequest) (*QueryAllLastBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlockHeightAll not implemented")
}
func (*UnimplementedQueryServer) Cctx(ctx context.Context, req *QueryGetCctxRequest) (*QueryGetCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cctx not implemented")
}
func (*UnimplementedQueryServer) CctxByNonce(ctx context.Context, req *QueryGetCctxByNonceRequest) (*QueryGetCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CctxByNonce not implemented")
}
func (*UnimplementedQueryServer) CctxAll(ctx context.Context, req *QueryAllCctxRequest) (*QueryAllCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CctxAll not implemented")
}
func (*UnimplementedQueryServer) ListPendingCctx(ctx context.Context, req *QueryListPendingCctxRequest) (*QueryListPendingCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingCctx not implemented")
}
func (*UnimplementedQueryServer) ListPendingCctxWithinRateLimit(ctx context.Context, req *QueryListPendingCctxWithinRateLimitRequest) (*QueryListPendingCctxWithinRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingCctxWithinRateLimit not implemented")
}
func (*UnimplementedQueryServer) ZetaAccounting(ctx context.Context, req *QueryZetaAccountingRequest) (*QueryZetaAccountingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZetaAccounting not implemented")
}
func (*UnimplementedQueryServer) LastZetaHeight(ctx context.Context, req *QueryLastZetaHeightRequest) (*QueryLastZetaHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastZetaHeight not implemented")
}
func (*UnimplementedQueryServer) RateLimiterFlags(ctx context.Context, req *QueryRateLimiterFlagsRequest) (*QueryRateLimiterFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimiterFlags not implemented")
}
func (*UnimplementedQueryServer) RateLimiterInput(ctx context.Context, req *QueryRateLimiterInputRequest) (*QueryRateLimiterInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimiterInput not implemented")
}
func (*UnimplementedQueryServer) OutTxTracker(ctx context.Context, req *QueryGetOutboundTrackerRequest) (*QueryGetOutboundTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutTxTracker not implemented")
}
func (*UnimplementedQueryServer) OutTxTrackerAll(ctx context.Context, req *QueryAllOutboundTrackerRequest) (*QueryAllOutboundTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutTxTrackerAll not implemented")
}
func (*UnimplementedQueryServer) OutTxTrackerAllByChain(ctx context.Context, req *QueryAllOutboundTrackerByChainRequest) (*QueryAllOutboundTrackerByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutTxTrackerAllByChain not implemented")
}
func (*UnimplementedQueryServer) InTxTrackerAllByChain(ctx context.Context, req *QueryAllInboundTrackerByChainRequest) (*QueryAllInboundTrackerByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxTrackerAllByChain not implemented")
}
func (*UnimplementedQueryServer) InTxTrackerAll(ctx context.Context, req *QueryAllInboundTrackersRequest) (*QueryAllInboundTrackersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxTrackerAll not implemented")
}
func (*UnimplementedQueryServer) InTxHashToCctx(ctx context.Context, req *QueryGetInboundHashToCctxRequest) (*QueryGetInboundHashToCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxHashToCctx not implemented")
}
func (*UnimplementedQueryServer) InTxHashToCctxData(ctx context.Context, req *QueryInboundHashToCctxDataRequest) (*QueryInboundHashToCctxDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxHashToCctxData not implemented")
}
func (*UnimplementedQueryServer) InTxHashToCctxAll(ctx context.Context, req *QueryAllInboundHashToCctxRequest) (*QueryAllInboundHashToCctxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxHashToCctxAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_OutboundTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOutboundTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/OutboundTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundTracker(ctx, req.(*QueryGetOutboundTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutboundTrackerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutboundTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundTrackerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/OutboundTrackerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundTrackerAll(ctx, req.(*QueryAllOutboundTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutboundTrackerAllByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutboundTrackerByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundTrackerAllByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/OutboundTrackerAllByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundTrackerAllByChain(ctx, req.(*QueryAllOutboundTrackerByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InboundTrackerAllByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInboundTrackerByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InboundTrackerAllByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InboundTrackerAllByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InboundTrackerAllByChain(ctx, req.(*QueryAllInboundTrackerByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InboundTrackerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInboundTrackersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InboundTrackerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InboundTrackerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InboundTrackerAll(ctx, req.(*QueryAllInboundTrackersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InboundHashToCctx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInboundHashToCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InboundHashToCctx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InboundHashToCctx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InboundHashToCctx(ctx, req.(*QueryGetInboundHashToCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InboundHashToCctxData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInboundHashToCctxDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InboundHashToCctxData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InboundHashToCctxData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InboundHashToCctxData(ctx, req.(*QueryInboundHashToCctxDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InboundHashToCctxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInboundHashToCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InboundHashToCctxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InboundHashToCctxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InboundHashToCctxAll(ctx, req.(*QueryAllInboundHashToCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPrice(ctx, req.(*QueryGetGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPriceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPriceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/GasPriceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPriceAll(ctx, req.(*QueryAllGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConvertGasToZeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConvertGasToZetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConvertGasToZeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ConvertGasToZeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConvertGasToZeta(ctx, req.(*QueryConvertGasToZetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProtocolFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMessagePassingProtocolFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProtocolFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ProtocolFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProtocolFee(ctx, req.(*QueryMessagePassingProtocolFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/LastBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBlockHeight(ctx, req.(*QueryGetLastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBlockHeightAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBlockHeightAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/LastBlockHeightAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBlockHeightAll(ctx, req.(*QueryAllLastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Cctx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Cctx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/Cctx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Cctx(ctx, req.(*QueryGetCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CctxByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCctxByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CctxByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/CctxByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CctxByNonce(ctx, req.(*QueryGetCctxByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CctxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CctxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/CctxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CctxAll(ctx, req.(*QueryAllCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPendingCctx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListPendingCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPendingCctx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ListPendingCctx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPendingCctx(ctx, req.(*QueryListPendingCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPendingCctxWithinRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListPendingCctxWithinRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPendingCctxWithinRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ListPendingCctxWithinRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPendingCctxWithinRateLimit(ctx, req.(*QueryListPendingCctxWithinRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ZetaAccounting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZetaAccountingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZetaAccounting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/ZetaAccounting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZetaAccounting(ctx, req.(*QueryZetaAccountingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastZetaHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastZetaHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastZetaHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/LastZetaHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastZetaHeight(ctx, req.(*QueryLastZetaHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RateLimiterFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimiterFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RateLimiterFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/RateLimiterFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RateLimiterFlags(ctx, req.(*QueryRateLimiterFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RateLimiterInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimiterInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RateLimiterInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/RateLimiterInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RateLimiterInput(ctx, req.(*QueryRateLimiterInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutTxTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOutboundTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutTxTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/OutTxTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutTxTracker(ctx, req.(*QueryGetOutboundTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutTxTrackerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutboundTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutTxTrackerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/OutTxTrackerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutTxTrackerAll(ctx, req.(*QueryAllOutboundTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutTxTrackerAllByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutboundTrackerByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutTxTrackerAllByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/OutTxTrackerAllByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutTxTrackerAllByChain(ctx, req.(*QueryAllOutboundTrackerByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxTrackerAllByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInboundTrackerByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxTrackerAllByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InTxTrackerAllByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxTrackerAllByChain(ctx, req.(*QueryAllInboundTrackerByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxTrackerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInboundTrackersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxTrackerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InTxTrackerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxTrackerAll(ctx, req.(*QueryAllInboundTrackersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxHashToCctx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInboundHashToCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxHashToCctx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InTxHashToCctx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxHashToCctx(ctx, req.(*QueryGetInboundHashToCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxHashToCctxData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInboundHashToCctxDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxHashToCctxData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InTxHashToCctxData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxHashToCctxData(ctx, req.(*QueryInboundHashToCctxDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxHashToCctxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInboundHashToCctxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxHashToCctxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.crosschain.Query/InTxHashToCctxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxHashToCctxAll(ctx, req.(*QueryAllInboundHashToCctxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.crosschain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OutboundTracker",
			Handler:    _Query_OutboundTracker_Handler,
		},
		{
			MethodName: "OutboundTrackerAll",
			Handler:    _Query_OutboundTrackerAll_Handler,
		},
		{
			MethodName: "OutboundTrackerAllByChain",
			Handler:    _Query_OutboundTrackerAllByChain_Handler,
		},
		{
			MethodName: "InboundTrackerAllByChain",
			Handler:    _Query_InboundTrackerAllByChain_Handler,
		},
		{
			MethodName: "InboundTrackerAll",
			Handler:    _Query_InboundTrackerAll_Handler,
		},
		{
			MethodName: "InboundHashToCctx",
			Handler:    _Query_InboundHashToCctx_Handler,
		},
		{
			MethodName: "InboundHashToCctxData",
			Handler:    _Query_InboundHashToCctxData_Handler,
		},
		{
			MethodName: "InboundHashToCctxAll",
			Handler:    _Query_InboundHashToCctxAll_Handler,
		},
		{
			MethodName: "GasPrice",
			Handler:    _Query_GasPrice_Handler,
		},
		{
			MethodName: "GasPriceAll",
			Handler:    _Query_GasPriceAll_Handler,
		},
		{
			MethodName: "ConvertGasToZeta",
			Handler:    _Query_ConvertGasToZeta_Handler,
		},
		{
			MethodName: "ProtocolFee",
			Handler:    _Query_ProtocolFee_Handler,
		},
		{
			MethodName: "LastBlockHeight",
			Handler:    _Query_LastBlockHeight_Handler,
		},
		{
			MethodName: "LastBlockHeightAll",
			Handler:    _Query_LastBlockHeightAll_Handler,
		},
		{
			MethodName: "Cctx",
			Handler:    _Query_Cctx_Handler,
		},
		{
			MethodName: "CctxByNonce",
			Handler:    _Query_CctxByNonce_Handler,
		},
		{
			MethodName: "CctxAll",
			Handler:    _Query_CctxAll_Handler,
		},
		{
			MethodName: "ListPendingCctx",
			Handler:    _Query_ListPendingCctx_Handler,
		},
		{
			MethodName: "ListPendingCctxWithinRateLimit",
			Handler:    _Query_ListPendingCctxWithinRateLimit_Handler,
		},
		{
			MethodName: "ZetaAccounting",
			Handler:    _Query_ZetaAccounting_Handler,
		},
		{
			MethodName: "LastZetaHeight",
			Handler:    _Query_LastZetaHeight_Handler,
		},
		{
			MethodName: "RateLimiterFlags",
			Handler:    _Query_RateLimiterFlags_Handler,
		},
		{
			MethodName: "RateLimiterInput",
			Handler:    _Query_RateLimiterInput_Handler,
		},
		{
			MethodName: "OutTxTracker",
			Handler:    _Query_OutTxTracker_Handler,
		},
		{
			MethodName: "OutTxTrackerAll",
			Handler:    _Query_OutTxTrackerAll_Handler,
		},
		{
			MethodName: "OutTxTrackerAllByChain",
			Handler:    _Query_OutTxTrackerAllByChain_Handler,
		},
		{
			MethodName: "InTxTrackerAllByChain",
			Handler:    _Query_InTxTrackerAllByChain_Handler,
		},
		{
			MethodName: "InTxTrackerAll",
			Handler:    _Query_InTxTrackerAll_Handler,
		},
		{
			MethodName: "InTxHashToCctx",
			Handler:    _Query_InTxHashToCctx_Handler,
		},
		{
			MethodName: "InTxHashToCctxData",
			Handler:    _Query_InTxHashToCctxData_Handler,
		},
		{
			MethodName: "InTxHashToCctxAll",
			Handler:    _Query_InTxHashToCctxAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zetachain/zetacore/crosschain/query.proto",
}

func (m *QueryZetaAccountingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZetaAccountingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZetaAccountingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryZetaAccountingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZetaAccountingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZetaAccountingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AbortedZetaAmount) > 0 {
		i -= len(m.AbortedZetaAmount)
		copy(dAtA[i:], m.AbortedZetaAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AbortedZetaAmount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutboundTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutboundTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutboundTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutboundTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutboundTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutboundTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutboundTracker.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOutboundTrackerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutboundTrackerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutboundTrackerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutboundTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutboundTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutboundTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutboundTracker) > 0 {
		for iNdEx := len(m.OutboundTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutboundTrackerByChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutboundTrackerByChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutboundTrackerByChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutboundTrackerByChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutboundTrackerByChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutboundTrackerByChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutboundTracker) > 0 {
		for iNdEx := len(m.OutboundTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInboundTrackerByChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInboundTrackerByChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInboundTrackerByChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInboundTrackerByChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInboundTrackerByChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInboundTrackerByChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InboundTracker) > 0 {
		for iNdEx := len(m.InboundTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InboundTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInboundTrackersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInboundTrackersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInboundTrackersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInboundTrackersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInboundTrackersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInboundTrackersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InboundTracker) > 0 {
		for iNdEx := len(m.InboundTracker) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InboundTracker[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInboundHashToCctxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInboundHashToCctxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInboundHashToCctxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InboundHash) > 0 {
		i -= len(m.InboundHash)
		copy(dAtA[i:], m.InboundHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InboundHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInboundHashToCctxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInboundHashToCctxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInboundHashToCctxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InboundHashToCctx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInboundHashToCctxDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInboundHashToCctxDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInboundHashToCctxDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InboundHash) > 0 {
		i -= len(m.InboundHash)
		copy(dAtA[i:], m.InboundHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InboundHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInboundHashToCctxDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInboundHashToCctxDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInboundHashToCctxDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrossChainTxs) > 0 {
		for iNdEx := len(m.CrossChainTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInboundHashToCctxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInboundHashToCctxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInboundHashToCctxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInboundHashToCctxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInboundHashToCctxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInboundHashToCctxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InboundHashToCctx) > 0 {
		for iNdEx := len(m.InboundHashToCctx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InboundHashToCctx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasPrice != nil {
		{
			size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GasPrice) > 0 {
		for iNdEx := len(m.GasPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastBlockHeight != nil {
		{
			size, err := m.LastBlockHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLastBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLastBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLastBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLastBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLastBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLastBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LastBlockHeight) > 0 {
		for iNdEx := len(m.LastBlockHeight) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastBlockHeight[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCctxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCctxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCctxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCctxByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCctxByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCctxByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCctxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCctxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCctxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrossChainTx != nil {
		{
			size, err := m.CrossChainTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCctxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCctxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCctxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCctxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCctxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCctxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrossChainTx) > 0 {
		for iNdEx := len(m.CrossChainTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPendingCctxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPendingCctxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPendingCctxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPendingCctxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPendingCctxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPendingCctxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalPending != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalPending))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CrossChainTx) > 0 {
		for iNdEx := len(m.CrossChainTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimiterInputRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimiterInputRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimiterInputRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Window != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Window))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimiterInputResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimiterInputResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimiterInputResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LowestPendingCctxHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LowestPendingCctxHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PendingCctxsValue) > 0 {
		i -= len(m.PendingCctxsValue)
		copy(dAtA[i:], m.PendingCctxsValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PendingCctxsValue)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PastCctxsValue) > 0 {
		i -= len(m.PastCctxsValue)
		copy(dAtA[i:], m.PastCctxsValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PastCctxsValue)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TotalPending != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalPending))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CctxsPending) > 0 {
		for iNdEx := len(m.CctxsPending) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CctxsPending[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CctxsMissed) > 0 {
		for iNdEx := len(m.CctxsMissed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CctxsMissed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPendingCctxWithinRateLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPendingCctxWithinRateLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPendingCctxWithinRateLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPendingCctxWithinRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPendingCctxWithinRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPendingCctxWithinRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimitExceeded {
		i--
		if m.RateLimitExceeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.CurrentWithdrawRate) > 0 {
		i -= len(m.CurrentWithdrawRate)
		copy(dAtA[i:], m.CurrentWithdrawRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentWithdrawRate)))
		i--
		dAtA[i] = 0x22
	}
	if m.CurrentWithdrawWindow != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentWithdrawWindow))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalPending != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalPending))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CrossChainTx) > 0 {
		for iNdEx := len(m.CrossChainTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossChainTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastZetaHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastZetaHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastZetaHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastZetaHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastZetaHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastZetaHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryConvertGasToZetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConvertGasToZetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConvertGasToZetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryConvertGasToZetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConvertGasToZetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConvertGasToZetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZetaBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ZetaBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProtocolFeeInZeta) > 0 {
		i -= len(m.ProtocolFeeInZeta)
		copy(dAtA[i:], m.ProtocolFeeInZeta)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProtocolFeeInZeta)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutboundGasInZeta) > 0 {
		i -= len(m.OutboundGasInZeta)
		copy(dAtA[i:], m.OutboundGasInZeta)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OutboundGasInZeta)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMessagePassingProtocolFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessagePassingProtocolFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessagePassingProtocolFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMessagePassingProtocolFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessagePassingProtocolFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessagePassingProtocolFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeInZeta) > 0 {
		i -= len(m.FeeInZeta)
		copy(dAtA[i:], m.FeeInZeta)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeeInZeta)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimiterFlagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimiterFlagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimiterFlagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRateLimiterFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimiterFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimiterFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RateLimiterFlags.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryZetaAccountingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryZetaAccountingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AbortedZetaAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOutboundTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainID != 0 {
		n += 1 + sovQuery(uint64(m.ChainID))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryGetOutboundTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OutboundTracker.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOutboundTrackerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutboundTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutboundTracker) > 0 {
		for _, e := range m.OutboundTracker {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutboundTrackerByChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != 0 {
		n += 1 + sovQuery(uint64(m.Chain))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutboundTrackerByChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutboundTracker) > 0 {
		for _, e := range m.OutboundTracker {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInboundTrackerByChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInboundTrackerByChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InboundTracker) > 0 {
		for _, e := range m.InboundTracker {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInboundTrackersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInboundTrackersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InboundTracker) > 0 {
		for _, e := range m.InboundTracker {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInboundHashToCctxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InboundHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInboundHashToCctxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InboundHashToCctx.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryInboundHashToCctxDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InboundHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInboundHashToCctxDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrossChainTxs) > 0 {
		for _, e := range m.CrossChainTxs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllInboundHashToCctxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInboundHashToCctxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InboundHashToCctx) > 0 {
		for _, e := range m.InboundHashToCctx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasPrice != nil {
		l = m.GasPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasPrice) > 0 {
		for _, e := range m.GasPrice {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastBlockHeight != nil {
		l = m.LastBlockHeight.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLastBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLastBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LastBlockHeight) > 0 {
		for _, e := range m.LastBlockHeight {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCctxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCctxByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainID != 0 {
		n += 1 + sovQuery(uint64(m.ChainID))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryGetCctxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrossChainTx != nil {
		l = m.CrossChainTx.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCctxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCctxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrossChainTx) > 0 {
		for _, e := range m.CrossChainTx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListPendingCctxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryListPendingCctxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrossChainTx) > 0 {
		for _, e := range m.CrossChainTx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TotalPending != 0 {
		n += 1 + sovQuery(uint64(m.TotalPending))
	}
	return n
}

func (m *QueryRateLimiterInputRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	if m.Window != 0 {
		n += 1 + sovQuery(uint64(m.Window))
	}
	return n
}

func (m *QueryRateLimiterInputResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if len(m.CctxsMissed) > 0 {
		for _, e := range m.CctxsMissed {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.CctxsPending) > 0 {
		for _, e := range m.CctxsPending {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TotalPending != 0 {
		n += 1 + sovQuery(uint64(m.TotalPending))
	}
	l = len(m.PastCctxsValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PendingCctxsValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LowestPendingCctxHeight != 0 {
		n += 1 + sovQuery(uint64(m.LowestPendingCctxHeight))
	}
	return n
}

func (m *QueryListPendingCctxWithinRateLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryListPendingCctxWithinRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrossChainTx) > 0 {
		for _, e := range m.CrossChainTx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TotalPending != 0 {
		n += 1 + sovQuery(uint64(m.TotalPending))
	}
	if m.CurrentWithdrawWindow != 0 {
		n += 1 + sovQuery(uint64(m.CurrentWithdrawWindow))
	}
	l = len(m.CurrentWithdrawRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RateLimitExceeded {
		n += 2
	}
	return n
}

func (m *QueryLastZetaHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastZetaHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryConvertGasToZetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConvertGasToZetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutboundGasInZeta)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ProtocolFeeInZeta)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ZetaBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.ZetaBlockHeight))
	}
	return n
}

func (m *QueryMessagePassingProtocolFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMessagePassingProtocolFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeeInZeta)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRateLimiterFlagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRateLimiterFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RateLimiterFlags.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryZetaAccountingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZetaAccountingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZetaAccountingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZetaAccountingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZetaAccountingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZetaAccountingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortedZetaAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbortedZetaAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutboundTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutboundTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutboundTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutboundTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutboundTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutboundTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutboundTracker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutboundTrackerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutboundTrackerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutboundTrackerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutboundTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutboundTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutboundTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTracker = append(m.OutboundTracker, OutboundTracker{})
			if err := m.OutboundTracker[len(m.OutboundTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutboundTrackerByChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutboundTrackerByChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutboundTrackerByChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutboundTrackerByChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutboundTrackerByChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutboundTrackerByChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTracker = append(m.OutboundTracker, OutboundTracker{})
			if err := m.OutboundTracker[len(m.OutboundTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInboundTrackerByChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInboundTrackerByChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInboundTrackerByChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInboundTrackerByChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInboundTrackerByChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInboundTrackerByChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundTracker = append(m.InboundTracker, InboundTracker{})
			if err := m.InboundTracker[len(m.InboundTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInboundTrackersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInboundTrackersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInboundTrackersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInboundTrackersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInboundTrackersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInboundTrackersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundTracker = append(m.InboundTracker, InboundTracker{})
			if err := m.InboundTracker[len(m.InboundTracker)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInboundHashToCctxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInboundHashToCctxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInboundHashToCctxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInboundHashToCctxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInboundHashToCctxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInboundHashToCctxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundHashToCctx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InboundHashToCctx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInboundHashToCctxDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInboundHashToCctxDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInboundHashToCctxDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInboundHashToCctxDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInboundHashToCctxDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInboundHashToCctxDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainTxs = append(m.CrossChainTxs, CrossChainTx{})
			if err := m.CrossChainTxs[len(m.CrossChainTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInboundHashToCctxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInboundHashToCctxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInboundHashToCctxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInboundHashToCctxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInboundHashToCctxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInboundHashToCctxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundHashToCctx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundHashToCctx = append(m.InboundHashToCctx, InboundHashToCctx{})
			if err := m.InboundHashToCctx[len(m.InboundHashToCctx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasPrice == nil {
				m.GasPrice = &GasPrice{}
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = append(m.GasPrice, &GasPrice{})
			if err := m.GasPrice[len(m.GasPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastBlockHeight == nil {
				m.LastBlockHeight = &LastBlockHeight{}
			}
			if err := m.LastBlockHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLastBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLastBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBlockHeight = append(m.LastBlockHeight, &LastBlockHeight{})
			if err := m.LastBlockHeight[len(m.LastBlockHeight)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCctxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCctxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCctxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCctxByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCctxByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCctxByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCctxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCctxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCctxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrossChainTx == nil {
				m.CrossChainTx = &CrossChainTx{}
			}
			if err := m.CrossChainTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCctxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCctxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCctxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCctxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCctxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCctxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainTx = append(m.CrossChainTx, &CrossChainTx{})
			if err := m.CrossChainTx[len(m.CrossChainTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPendingCctxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPendingCctxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPendingCctxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPendingCctxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPendingCctxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPendingCctxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainTx = append(m.CrossChainTx, &CrossChainTx{})
			if err := m.CrossChainTx[len(m.CrossChainTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPending", wireType)
			}
			m.TotalPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPending |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimiterInputRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimiterInputRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimiterInputRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			m.Window = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Window |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimiterInputResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimiterInputResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimiterInputResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxsMissed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxsMissed = append(m.CctxsMissed, &CrossChainTx{})
			if err := m.CctxsMissed[len(m.CctxsMissed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxsPending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxsPending = append(m.CctxsPending, &CrossChainTx{})
			if err := m.CctxsPending[len(m.CctxsPending)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPending", wireType)
			}
			m.TotalPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPending |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PastCctxsValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PastCctxsValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingCctxsValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingCctxsValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestPendingCctxHeight", wireType)
			}
			m.LowestPendingCctxHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowestPendingCctxHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPendingCctxWithinRateLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPendingCctxWithinRateLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPendingCctxWithinRateLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPendingCctxWithinRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPendingCctxWithinRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPendingCctxWithinRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainTx = append(m.CrossChainTx, &CrossChainTx{})
			if err := m.CrossChainTx[len(m.CrossChainTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPending", wireType)
			}
			m.TotalPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPending |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentWithdrawWindow", wireType)
			}
			m.CurrentWithdrawWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentWithdrawWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentWithdrawRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentWithdrawRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitExceeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RateLimitExceeded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastZetaHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastZetaHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastZetaHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastZetaHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastZetaHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastZetaHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConvertGasToZetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConvertGasToZetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConvertGasToZetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConvertGasToZetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConvertGasToZetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConvertGasToZetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundGasInZeta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundGasInZeta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeeInZeta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolFeeInZeta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaBlockHeight", wireType)
			}
			m.ZetaBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZetaBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessagePassingProtocolFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessagePassingProtocolFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessagePassingProtocolFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessagePassingProtocolFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessagePassingProtocolFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessagePassingProtocolFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInZeta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeInZeta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimiterFlagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimiterFlagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimiterFlagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimiterFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimiterFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimiterFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RateLimiterFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
